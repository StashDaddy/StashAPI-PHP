<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="L:/Projects/Stash/StashApi-php-Dev/docs/../tests/_support/_generated" file="UnitTesterActions.php" realpath="L:/Projects/Stash/StashApi-php-Dev/tests/_support/_generated/UnitTesterActions.php" size="73431" time="2020-09-14T18:29:51+00:00" unixtime="1600108191" sha1="52ed214951da29495501948a7a9c80eb6d1799f4" relative="tests/_support/_generated/UnitTesterActions.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php </token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_COMMENT">//[STAMP] 984bd5e2733b7df91ff850d6b63a8724</token>
  </line>
  <line no="2">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">_generated</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3"/>
  <line no="4">
    <token name="T_COMMENT">// This class was automatically generated by build task</token>
  </line>
  <line no="5">
    <token name="T_COMMENT">// You should not change it manually as it will be overwritten on next build</token>
  </line>
  <line no="6">
    <token name="T_COMMENT">// @codingStandardsIgnoreFile</token>
  </line>
  <line no="7"/>
  <line no="8">
    <token name="T_TRAIT">trait</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">UnitTesterActions</token>
  </line>
  <line no="9">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="10">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT">     * @return \Codeception\Scenario</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="13">
    <token name="T_WHITESPACE">    </token>
    <token name="T_ABSTRACT">abstract</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PROTECTED">protected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="14"/>
  <line no="15">
    <token name="T_WHITESPACE">    </token>
  </line>
  <line no="16">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="17">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT">     * Handles and checks exception called inside callback function.</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT">     * Either exception class name or exception instance should be provided.</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT">     * $I-&gt;expectException(MyException::class, function() {</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT">     *     $this-&gt;doSomethingBad();</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT">     * });</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT">     * $I-&gt;expectException(new MyException(), function() {</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT">     *     $this-&gt;doSomethingBad();</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT">     * });</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT">     * If you want to check message or exception code, you can pass them with exception instance:</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT">     * // will check that exception MyException is thrown with "Don't do bad things" message</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT">     * $I-&gt;expectException(new MyException("Don't do bad things"), function() {</token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT">     *     $this-&gt;doSomethingBad();</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT">     * });</token>
  </line>
  <line no="39">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT">     * @deprecated Use expectThrowable() instead</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT">     * @param Exception|string $exception</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT">     * @param callable $callback</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\Asserts::expectException()</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="46">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">expectException</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$exception</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$callback</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="47">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'expectException'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="48">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="49"/>
  <line no="50">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="51">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="53">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="54">
    <token name="T_DOC_COMMENT">     * Handles and checks throwables (Exceptions/Errors) called inside the callback function.</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT">     * Either throwable class name or throwable instance should be provided.</token>
  </line>
  <line no="56">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="57">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="58">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT">     * $I-&gt;expectThrowable(MyThrowable::class, function() {</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">     *     $this-&gt;doSomethingBad();</token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT">     * });</token>
  </line>
  <line no="62">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT">     * $I-&gt;expectThrowable(new MyException(), function() {</token>
  </line>
  <line no="64">
    <token name="T_DOC_COMMENT">     *     $this-&gt;doSomethingBad();</token>
  </line>
  <line no="65">
    <token name="T_DOC_COMMENT">     * });</token>
  </line>
  <line no="66">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="67">
    <token name="T_DOC_COMMENT">     * If you want to check message or throwable code, you can pass them with throwable instance:</token>
  </line>
  <line no="68">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="69">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="70">
    <token name="T_DOC_COMMENT">     * // will check that throwable MyError is thrown with "Don't do bad things" message</token>
  </line>
  <line no="71">
    <token name="T_DOC_COMMENT">     * $I-&gt;expectThrowable(new MyError("Don't do bad things"), function() {</token>
  </line>
  <line no="72">
    <token name="T_DOC_COMMENT">     *     $this-&gt;doSomethingBad();</token>
  </line>
  <line no="73">
    <token name="T_DOC_COMMENT">     * });</token>
  </line>
  <line no="74">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="75">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="76">
    <token name="T_DOC_COMMENT">     * @param Throwable|string $throwable</token>
  </line>
  <line no="77">
    <token name="T_DOC_COMMENT">     * @param callable $callback</token>
  </line>
  <line no="78">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\Asserts::expectThrowable()</token>
  </line>
  <line no="79">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="80">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">expectThrowable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$throwable</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$callback</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="81">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'expectThrowable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="82">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="83"/>
  <line no="84">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="85">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="86">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="87">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="88">
    <token name="T_DOC_COMMENT">     * Asserts that a file does not exist.</token>
  </line>
  <line no="89">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="90">
    <token name="T_DOC_COMMENT">     * @param string $filename</token>
  </line>
  <line no="91">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="92">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFileNotExists()</token>
  </line>
  <line no="93">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="94">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileNotExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filename</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="95">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFileNotExists'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="96">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="97"/>
  <line no="98">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="99">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="100">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="101">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="102">
    <token name="T_DOC_COMMENT">     * Asserts that a value is greater than or equal to another value.</token>
  </line>
  <line no="103">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="104">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="105">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="106">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="107">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertGreaterOrEquals()</token>
  </line>
  <line no="108">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="109">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertGreaterOrEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="110">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertGreaterOrEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="111">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="112"/>
  <line no="113">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="114">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="115">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="116">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="117">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is empty.</token>
  </line>
  <line no="118">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="119">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="120">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="121">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsEmpty()</token>
  </line>
  <line no="122">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="123">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsEmpty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="124">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsEmpty'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="125">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="126"/>
  <line no="127">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="128">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="129">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="130">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="131">
    <token name="T_DOC_COMMENT">     * Asserts that a value is smaller than or equal to another value.</token>
  </line>
  <line no="132">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="133">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="134">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="135">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="136">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertLessOrEquals()</token>
  </line>
  <line no="137">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="138">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertLessOrEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="139">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertLessOrEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="140">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="141"/>
  <line no="142">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="143">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="144">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="145">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="146">
    <token name="T_DOC_COMMENT">     * Asserts that a string does not match a given regular expression.</token>
  </line>
  <line no="147">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="148">
    <token name="T_DOC_COMMENT">     * @param string $pattern</token>
  </line>
  <line no="149">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="150">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="151">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotRegExp()</token>
  </line>
  <line no="152">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="153">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotRegExp</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="154">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotRegExp'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="155">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="156"/>
  <line no="157">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="158">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="159">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="160">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="161">
    <token name="T_DOC_COMMENT">     * Asserts that a string matches a given regular expression.</token>
  </line>
  <line no="162">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="163">
    <token name="T_DOC_COMMENT">     * @param string $pattern</token>
  </line>
  <line no="164">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="165">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="166">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertRegExp()</token>
  </line>
  <line no="167">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="168">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertRegExp</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="169">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertRegExp'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="170">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="171"/>
  <line no="172">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="173">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="174">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="175">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="176">
    <token name="T_DOC_COMMENT">     * Evaluates a PHPUnit\Framework\Constraint matcher object.</token>
  </line>
  <line no="177">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="178">
    <token name="T_DOC_COMMENT">     * @param $value</token>
  </line>
  <line no="179">
    <token name="T_DOC_COMMENT">     * @param Constraint $constraint</token>
  </line>
  <line no="180">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="181">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertThatItsNot()</token>
  </line>
  <line no="182">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="183">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertThatItsNot</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="184">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertThatItsNot'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="185">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="186"/>
  <line no="187">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="188">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="189">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="190">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="191">
    <token name="T_DOC_COMMENT">     * Asserts that an array has a specified key.</token>
  </line>
  <line no="192">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="193">
    <token name="T_DOC_COMMENT">     * @param int|string $key</token>
  </line>
  <line no="194">
    <token name="T_DOC_COMMENT">     * @param array|ArrayAccess $array</token>
  </line>
  <line no="195">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="196">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertArrayHasKey()</token>
  </line>
  <line no="197">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="198">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertArrayHasKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$array</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="199">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertArrayHasKey'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="200">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="201"/>
  <line no="202">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="203">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="204">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="205">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="206">
    <token name="T_DOC_COMMENT">     * Asserts that an array does not have a specified key.</token>
  </line>
  <line no="207">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="208">
    <token name="T_DOC_COMMENT">     * @param int|string $key</token>
  </line>
  <line no="209">
    <token name="T_DOC_COMMENT">     * @param array|ArrayAccess $array</token>
  </line>
  <line no="210">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="211">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertArrayNotHasKey()</token>
  </line>
  <line no="212">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="213">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertArrayNotHasKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$array</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="214">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertArrayNotHasKey'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="215">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="216"/>
  <line no="217">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="218">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="219">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="220">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="221">
    <token name="T_DOC_COMMENT">     * Asserts that a class has a specified attribute.</token>
  </line>
  <line no="222">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="223">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="224">
    <token name="T_DOC_COMMENT">     * @param string $className</token>
  </line>
  <line no="225">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="226">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertClassHasAttribute()</token>
  </line>
  <line no="227">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="228">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertClassHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="229">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertClassHasAttribute'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="230">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="231"/>
  <line no="232">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="233">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="234">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="235">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="236">
    <token name="T_DOC_COMMENT">     * Asserts that a class has a specified static attribute.</token>
  </line>
  <line no="237">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="238">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="239">
    <token name="T_DOC_COMMENT">     * @param string $className</token>
  </line>
  <line no="240">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="241">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertClassHasStaticAttribute()</token>
  </line>
  <line no="242">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="243">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertClassHasStaticAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="244">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertClassHasStaticAttribute'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="245">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="246"/>
  <line no="247">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="248">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="249">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="250">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="251">
    <token name="T_DOC_COMMENT">     * Asserts that a class does not have a specified attribute.</token>
  </line>
  <line no="252">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="253">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="254">
    <token name="T_DOC_COMMENT">     * @param string $className</token>
  </line>
  <line no="255">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="256">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasAttribute()</token>
  </line>
  <line no="257">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="258">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertClassNotHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="259">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertClassNotHasAttribute'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="260">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="261"/>
  <line no="262">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="263">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="264">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="265">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="266">
    <token name="T_DOC_COMMENT">     * Asserts that a class does not have a specified static attribute.</token>
  </line>
  <line no="267">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="268">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="269">
    <token name="T_DOC_COMMENT">     * @param string $className</token>
  </line>
  <line no="270">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="271">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasStaticAttribute()</token>
  </line>
  <line no="272">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="273">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertClassNotHasStaticAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="274">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertClassNotHasStaticAttribute'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="275">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="276"/>
  <line no="277">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="278">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="279">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="280">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="281">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack contains a needle.</token>
  </line>
  <line no="282">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="283">
    <token name="T_DOC_COMMENT">     * @param $needle</token>
  </line>
  <line no="284">
    <token name="T_DOC_COMMENT">     * @param $haystack</token>
  </line>
  <line no="285">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="286">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertContains()</token>
  </line>
  <line no="287">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="288">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="289">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertContains'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="290">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="291"/>
  <line no="292">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="293">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="294">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="295">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="296">
    <token name="T_DOC_COMMENT">     * @param $needle</token>
  </line>
  <line no="297">
    <token name="T_DOC_COMMENT">     * @param $haystack</token>
  </line>
  <line no="298">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="299">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertContainsEquals()</token>
  </line>
  <line no="300">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="301">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertContainsEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="302">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertContainsEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="303">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="304"/>
  <line no="305">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="306">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="307">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="308">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="309">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack contains only values of a given type.</token>
  </line>
  <line no="310">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="311">
    <token name="T_DOC_COMMENT">     * @param string $type</token>
  </line>
  <line no="312">
    <token name="T_DOC_COMMENT">     * @param $haystack</token>
  </line>
  <line no="313">
    <token name="T_DOC_COMMENT">     * @param bool|null $isNativeType</token>
  </line>
  <line no="314">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="315">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertContainsOnly()</token>
  </line>
  <line no="316">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="317">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertContainsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isNativeType</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="318">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertContainsOnly'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="319">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="320"/>
  <line no="321">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="322">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="323">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="324">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="325">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack contains only instances of a given class name.</token>
  </line>
  <line no="326">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="327">
    <token name="T_DOC_COMMENT">     * @param string $className</token>
  </line>
  <line no="328">
    <token name="T_DOC_COMMENT">     * @param $haystack</token>
  </line>
  <line no="329">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="330">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertContainsOnlyInstancesOf()</token>
  </line>
  <line no="331">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="332">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertContainsOnlyInstancesOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="333">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertContainsOnlyInstancesOf'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="334">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="335"/>
  <line no="336">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="337">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="338">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="339">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="340">
    <token name="T_DOC_COMMENT">     * Asserts the number of elements of an array, Countable or Traversable.</token>
  </line>
  <line no="341">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="342">
    <token name="T_DOC_COMMENT">     * @param int $expectedCount</token>
  </line>
  <line no="343">
    <token name="T_DOC_COMMENT">     * @param Countable|iterable $haystack</token>
  </line>
  <line no="344">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="345">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertCount()</token>
  </line>
  <line no="346">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="347">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertCount</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedCount</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="348">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertCount'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="349">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="350"/>
  <line no="351">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="352">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="353">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="354">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="355">
    <token name="T_DOC_COMMENT">     * Asserts that a directory does not exist.</token>
  </line>
  <line no="356">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="357">
    <token name="T_DOC_COMMENT">     * @param string $directory</token>
  </line>
  <line no="358">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="359">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertDirectoryDoesNotExist()</token>
  </line>
  <line no="360">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="361">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertDirectoryDoesNotExist</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$directory</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="362">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertDirectoryDoesNotExist'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="363">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="364"/>
  <line no="365">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="366">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="367">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="368">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="369">
    <token name="T_DOC_COMMENT">     * Asserts that a directory exists.</token>
  </line>
  <line no="370">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="371">
    <token name="T_DOC_COMMENT">     * @param string $directory</token>
  </line>
  <line no="372">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="373">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertDirectoryExists()</token>
  </line>
  <line no="374">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="375">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertDirectoryExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$directory</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="376">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertDirectoryExists'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="377">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="378"/>
  <line no="379">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="380">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="381">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="382">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="383">
    <token name="T_DOC_COMMENT">     * Asserts that a directory exists and is not readable.</token>
  </line>
  <line no="384">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="385">
    <token name="T_DOC_COMMENT">     * @param string $directory</token>
  </line>
  <line no="386">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="387">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotReadable()</token>
  </line>
  <line no="388">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="389">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertDirectoryIsNotReadable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$directory</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="390">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertDirectoryIsNotReadable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="391">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="392"/>
  <line no="393">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="394">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="395">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="396">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="397">
    <token name="T_DOC_COMMENT">     * Asserts that a directory exists and is not writable.</token>
  </line>
  <line no="398">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="399">
    <token name="T_DOC_COMMENT">     * @param string $directory</token>
  </line>
  <line no="400">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="401">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotWritable()</token>
  </line>
  <line no="402">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="403">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertDirectoryIsNotWritable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$directory</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="404">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertDirectoryIsNotWritable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="405">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="406"/>
  <line no="407">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="408">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="409">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="410">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="411">
    <token name="T_DOC_COMMENT">     * Asserts that a directory exists and is readable.</token>
  </line>
  <line no="412">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="413">
    <token name="T_DOC_COMMENT">     * @param string $directory</token>
  </line>
  <line no="414">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="415">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsReadable()</token>
  </line>
  <line no="416">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="417">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertDirectoryIsReadable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$directory</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="418">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertDirectoryIsReadable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="419">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="420"/>
  <line no="421">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="422">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="423">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="424">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="425">
    <token name="T_DOC_COMMENT">     * Asserts that a directory exists and is writable.</token>
  </line>
  <line no="426">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="427">
    <token name="T_DOC_COMMENT">     * @param string $directory</token>
  </line>
  <line no="428">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="429">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsWritable()</token>
  </line>
  <line no="430">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="431">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertDirectoryIsWritable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$directory</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="432">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertDirectoryIsWritable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="433">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="434"/>
  <line no="435">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="436">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="437">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="438">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="439">
    <token name="T_DOC_COMMENT">     * Asserts that a string does not match a given regular expression.</token>
  </line>
  <line no="440">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="441">
    <token name="T_DOC_COMMENT">     * @param string $pattern</token>
  </line>
  <line no="442">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="443">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="444">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertDoesNotMatchRegularExpression()</token>
  </line>
  <line no="445">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="446">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertDoesNotMatchRegularExpression</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="447">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertDoesNotMatchRegularExpression'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="448">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="449"/>
  <line no="450">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="451">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="452">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="453">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="454">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is empty.</token>
  </line>
  <line no="455">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="456">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="457">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="458">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertEmpty()</token>
  </line>
  <line no="459">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="460">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertEmpty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="461">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertEmpty'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="462">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="463"/>
  <line no="464">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="465">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="466">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="467">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="468">
    <token name="T_DOC_COMMENT">     * Asserts that two variables are equal.</token>
  </line>
  <line no="469">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="470">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="471">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="472">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="473">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertEquals()</token>
  </line>
  <line no="474">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="475">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="476">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="477">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="478"/>
  <line no="479">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="480">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="481">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="482">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="483">
    <token name="T_DOC_COMMENT">     * Asserts that two variables are equal (canonicalizing).</token>
  </line>
  <line no="484">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="485">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="486">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="487">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="488">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertEqualsCanonicalizing()</token>
  </line>
  <line no="489">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="490">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertEqualsCanonicalizing</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="491">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertEqualsCanonicalizing'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="492">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="493"/>
  <line no="494">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="495">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="496">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="497">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="498">
    <token name="T_DOC_COMMENT">     * Asserts that two variables are equal (ignoring case).</token>
  </line>
  <line no="499">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="500">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="501">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="502">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="503">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertEqualsIgnoringCase()</token>
  </line>
  <line no="504">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="505">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertEqualsIgnoringCase</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="506">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertEqualsIgnoringCase'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="507">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="508"/>
  <line no="509">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="510">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="511">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="512">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="513">
    <token name="T_DOC_COMMENT">     * Asserts that two variables are equal (with delta).</token>
  </line>
  <line no="514">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="515">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="516">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="517">
    <token name="T_DOC_COMMENT">     * @param float $delta</token>
  </line>
  <line no="518">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="519">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertEqualsWithDelta()</token>
  </line>
  <line no="520">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="521">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertEqualsWithDelta</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="522">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertEqualsWithDelta'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="523">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="524"/>
  <line no="525">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="526">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="527">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="528">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="529">
    <token name="T_DOC_COMMENT">     * Asserts that a condition is false.</token>
  </line>
  <line no="530">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="531">
    <token name="T_DOC_COMMENT">     * @param $condition</token>
  </line>
  <line no="532">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="533">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFalse()</token>
  </line>
  <line no="534">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="535">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFalse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$condition</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="536">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFalse'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="537">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="538"/>
  <line no="539">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="540">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="541">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="542">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="543">
    <token name="T_DOC_COMMENT">     * Asserts that a file does not exist.</token>
  </line>
  <line no="544">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="545">
    <token name="T_DOC_COMMENT">     * @param string $filename</token>
  </line>
  <line no="546">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="547">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFileDoesNotExist()</token>
  </line>
  <line no="548">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="549">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileDoesNotExist</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filename</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="550">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFileDoesNotExist'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="551">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="552"/>
  <line no="553">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="554">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="555">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="556">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="557">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of one file is equal to the contents of another file.</token>
  </line>
  <line no="558">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="559">
    <token name="T_DOC_COMMENT">     * @param string $expected</token>
  </line>
  <line no="560">
    <token name="T_DOC_COMMENT">     * @param string $actual</token>
  </line>
  <line no="561">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="562">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFileEquals()</token>
  </line>
  <line no="563">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="564">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="565">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFileEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="566">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="567"/>
  <line no="568">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="569">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="570">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="571">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="572">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of one file is equal to the contents of another file (canonicalizing).</token>
  </line>
  <line no="573">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="574">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="575">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="576">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="577">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsCanonicalizing()</token>
  </line>
  <line no="578">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="579">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileEqualsCanonicalizing</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="580">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFileEqualsCanonicalizing'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="581">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="582"/>
  <line no="583">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="584">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="585">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="586">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="587">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of one file is equal to the contents of another file (ignoring case).</token>
  </line>
  <line no="588">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="589">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="590">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="591">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="592">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsIgnoringCase()</token>
  </line>
  <line no="593">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="594">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileEqualsIgnoringCase</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="595">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFileEqualsIgnoringCase'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="596">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="597"/>
  <line no="598">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="599">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="600">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="601">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="602">
    <token name="T_DOC_COMMENT">     * Asserts that a file exists.</token>
  </line>
  <line no="603">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="604">
    <token name="T_DOC_COMMENT">     * @param string $filename</token>
  </line>
  <line no="605">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="606">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFileExists()</token>
  </line>
  <line no="607">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="608">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filename</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="609">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFileExists'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="610">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="611"/>
  <line no="612">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="613">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="614">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="615">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="616">
    <token name="T_DOC_COMMENT">     * Asserts that a file exists and is not readable.</token>
  </line>
  <line no="617">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="618">
    <token name="T_DOC_COMMENT">     * @param string $file</token>
  </line>
  <line no="619">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="620">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotReadable()</token>
  </line>
  <line no="621">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="622">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileIsNotReadable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$file</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="623">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFileIsNotReadable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="624">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="625"/>
  <line no="626">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="627">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="628">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="629">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="630">
    <token name="T_DOC_COMMENT">     * Asserts that a file exists and is not writable.</token>
  </line>
  <line no="631">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="632">
    <token name="T_DOC_COMMENT">     * @param string $file</token>
  </line>
  <line no="633">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="634">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotWritable()</token>
  </line>
  <line no="635">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="636">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileIsNotWritable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$file</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="637">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFileIsNotWritable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="638">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="639"/>
  <line no="640">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="641">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="642">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="643">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="644">
    <token name="T_DOC_COMMENT">     * Asserts that a file exists and is readable.</token>
  </line>
  <line no="645">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="646">
    <token name="T_DOC_COMMENT">     * @param string $file</token>
  </line>
  <line no="647">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="648">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFileIsReadable()</token>
  </line>
  <line no="649">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="650">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileIsReadable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$file</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="651">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFileIsReadable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="652">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="653"/>
  <line no="654">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="655">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="656">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="657">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="658">
    <token name="T_DOC_COMMENT">     * Asserts that a file exists and is writable.</token>
  </line>
  <line no="659">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="660">
    <token name="T_DOC_COMMENT">     * @param string $file</token>
  </line>
  <line no="661">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="662">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFileIsWritable()</token>
  </line>
  <line no="663">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="664">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileIsWritable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$file</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="665">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFileIsWritable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="666">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="667"/>
  <line no="668">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="669">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="670">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="671">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="672">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of one file is not equal to the contents of another file.</token>
  </line>
  <line no="673">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="674">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="675">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="676">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="677">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFileNotEquals()</token>
  </line>
  <line no="678">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="679">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileNotEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="680">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFileNotEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="681">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="682"/>
  <line no="683">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="684">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="685">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="686">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="687">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of one file is not equal to the contents of another file (canonicalizing).</token>
  </line>
  <line no="688">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="689">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="690">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="691">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="692">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsCanonicalizing()</token>
  </line>
  <line no="693">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="694">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileNotEqualsCanonicalizing</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="695">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFileNotEqualsCanonicalizing'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="696">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="697"/>
  <line no="698">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="699">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="700">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="701">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="702">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of one file is not equal to the contents of another file (ignoring case).</token>
  </line>
  <line no="703">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="704">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="705">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="706">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="707">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsIgnoringCase()</token>
  </line>
  <line no="708">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="709">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileNotEqualsIgnoringCase</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="710">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFileNotEqualsIgnoringCase'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="711">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="712"/>
  <line no="713">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="714">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="715">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="716">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="717">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is finite.</token>
  </line>
  <line no="718">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="719">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="720">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="721">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertFinite()</token>
  </line>
  <line no="722">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="723">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFinite</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="724">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertFinite'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="725">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="726"/>
  <line no="727">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="728">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="729">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="730">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="731">
    <token name="T_DOC_COMMENT">     * Asserts that a value is greater than another value.</token>
  </line>
  <line no="732">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="733">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="734">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="735">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="736">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertGreaterThan()</token>
  </line>
  <line no="737">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="738">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertGreaterThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="739">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertGreaterThan'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="740">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="741"/>
  <line no="742">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="743">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="744">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="745">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="746">
    <token name="T_DOC_COMMENT">     * Asserts that a value is greater than or equal to another value.</token>
  </line>
  <line no="747">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="748">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="749">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="750">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="751">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertGreaterThanOrEqual()</token>
  </line>
  <line no="752">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="753">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertGreaterThanOrEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="754">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertGreaterThanOrEqual'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="755">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="756"/>
  <line no="757">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="758">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="759">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="760">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="761">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is infinite.</token>
  </line>
  <line no="762">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="763">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="764">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="765">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertInfinite()</token>
  </line>
  <line no="766">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="767">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertInfinite</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="768">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertInfinite'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="769">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="770"/>
  <line no="771">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="772">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="773">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="774">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="775">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of a given type.</token>
  </line>
  <line no="776">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="777">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="778">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="779">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="780">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertInstanceOf()</token>
  </line>
  <line no="781">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="782">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertInstanceOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="783">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertInstanceOf'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="784">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="785"/>
  <line no="786">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="787">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="788">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="789">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="790">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of type array.</token>
  </line>
  <line no="791">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="792">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="793">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="794">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsArray()</token>
  </line>
  <line no="795">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="796">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsArray</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="797">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsArray'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="798">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="799"/>
  <line no="800">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="801">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="802">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="803">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="804">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of type bool.</token>
  </line>
  <line no="805">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="806">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="807">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="808">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsBool()</token>
  </line>
  <line no="809">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="810">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsBool</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="811">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsBool'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="812">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="813"/>
  <line no="814">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="815">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="816">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="817">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="818">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of type callable.</token>
  </line>
  <line no="819">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="820">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="821">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="822">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsCallable()</token>
  </line>
  <line no="823">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="824">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsCallable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="825">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsCallable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="826">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="827"/>
  <line no="828">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="829">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="830">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="831">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="832">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of type resource and is closed.</token>
  </line>
  <line no="833">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="834">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="835">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="836">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsClosedResource()</token>
  </line>
  <line no="837">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="838">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsClosedResource</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="839">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsClosedResource'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="840">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="841"/>
  <line no="842">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="843">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="844">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="845">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="846">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of type float.</token>
  </line>
  <line no="847">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="848">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="849">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="850">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsFloat()</token>
  </line>
  <line no="851">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="852">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsFloat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="853">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsFloat'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="854">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="855"/>
  <line no="856">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="857">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="858">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="859">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="860">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of type int.</token>
  </line>
  <line no="861">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="862">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="863">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="864">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsInt()</token>
  </line>
  <line no="865">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="866">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsInt</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="867">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsInt'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="868">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="869"/>
  <line no="870">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="871">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="872">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="873">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="874">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of type iterable.</token>
  </line>
  <line no="875">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="876">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="877">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="878">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsIterable()</token>
  </line>
  <line no="879">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="880">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsIterable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="881">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsIterable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="882">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="883"/>
  <line no="884">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="885">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="886">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="887">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="888">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of type array.</token>
  </line>
  <line no="889">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="890">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="891">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="892">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotArray()</token>
  </line>
  <line no="893">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="894">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotArray</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="895">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotArray'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="896">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="897"/>
  <line no="898">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="899">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="900">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="901">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="902">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of type bool.</token>
  </line>
  <line no="903">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="904">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="905">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="906">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotBool()</token>
  </line>
  <line no="907">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="908">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotBool</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="909">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotBool'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="910">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="911"/>
  <line no="912">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="913">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="914">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="915">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="916">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of type callable.</token>
  </line>
  <line no="917">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="918">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="919">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="920">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotCallable()</token>
  </line>
  <line no="921">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="922">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotCallable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="923">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotCallable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="924">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="925"/>
  <line no="926">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="927">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="928">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="929">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="930">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of type resource.</token>
  </line>
  <line no="931">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="932">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="933">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="934">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotClosedResource()</token>
  </line>
  <line no="935">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="936">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotClosedResource</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="937">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotClosedResource'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="938">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="939"/>
  <line no="940">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="941">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="942">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="943">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="944">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of type float.</token>
  </line>
  <line no="945">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="946">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="947">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="948">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotFloat()</token>
  </line>
  <line no="949">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="950">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotFloat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="951">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotFloat'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="952">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="953"/>
  <line no="954">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="955">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="956">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="957">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="958">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of type int.</token>
  </line>
  <line no="959">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="960">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="961">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="962">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotInt()</token>
  </line>
  <line no="963">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="964">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotInt</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="965">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotInt'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="966">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="967"/>
  <line no="968">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="969">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="970">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="971">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="972">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of type iterable.</token>
  </line>
  <line no="973">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="974">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="975">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="976">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotIterable()</token>
  </line>
  <line no="977">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="978">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotIterable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="979">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotIterable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="980">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="981"/>
  <line no="982">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="983">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="984">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="985">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="986">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of type numeric.</token>
  </line>
  <line no="987">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="988">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="989">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="990">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotNumeric()</token>
  </line>
  <line no="991">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="992">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotNumeric</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="993">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotNumeric'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="994">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="995"/>
  <line no="996">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="997">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="998">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="999">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1000">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of type object.</token>
  </line>
  <line no="1001">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1002">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1003">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1004">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotObject()</token>
  </line>
  <line no="1005">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1006">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotObject</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1007">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotObject'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1008">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1009"/>
  <line no="1010">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1011">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1012">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1013">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1014">
    <token name="T_DOC_COMMENT">     * Asserts that a file/dir exists and is not readable.</token>
  </line>
  <line no="1015">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1016">
    <token name="T_DOC_COMMENT">     * @param string $filename</token>
  </line>
  <line no="1017">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1018">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotReadable()</token>
  </line>
  <line no="1019">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1020">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotReadable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filename</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1021">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotReadable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1022">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1023"/>
  <line no="1024">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1025">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1026">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1027">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1028">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of type resource.</token>
  </line>
  <line no="1029">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1030">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1031">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1032">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotResource()</token>
  </line>
  <line no="1033">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1034">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotResource</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1035">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotResource'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1036">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1037"/>
  <line no="1038">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1039">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1040">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1041">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1042">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of type scalar.</token>
  </line>
  <line no="1043">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1044">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1045">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1046">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotScalar()</token>
  </line>
  <line no="1047">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1048">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotScalar</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1049">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotScalar'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1050">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1051"/>
  <line no="1052">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1053">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1054">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1055">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1056">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of type string.</token>
  </line>
  <line no="1057">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1058">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1059">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1060">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotString()</token>
  </line>
  <line no="1061">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1062">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1063">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotString'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1064">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1065"/>
  <line no="1066">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1067">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1068">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1069">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1070">
    <token name="T_DOC_COMMENT">     * Asserts that a file/dir exists and is not writable.</token>
  </line>
  <line no="1071">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1072">
    <token name="T_DOC_COMMENT">     * @param $filename</token>
  </line>
  <line no="1073">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1074">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNotWritable()</token>
  </line>
  <line no="1075">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1076">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNotWritable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filename</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1077">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNotWritable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1078">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1079"/>
  <line no="1080">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1081">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1082">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1083">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1084">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of type numeric.</token>
  </line>
  <line no="1085">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1086">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1087">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1088">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsNumeric()</token>
  </line>
  <line no="1089">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1090">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsNumeric</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1091">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsNumeric'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1092">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1093"/>
  <line no="1094">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1095">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1096">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1097">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1098">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of type object.</token>
  </line>
  <line no="1099">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1100">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1101">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1102">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsObject()</token>
  </line>
  <line no="1103">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1104">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsObject</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1105">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsObject'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1106">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1107"/>
  <line no="1108">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1109">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1110">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1111">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1112">
    <token name="T_DOC_COMMENT">     * Asserts that a file/dir is readable.</token>
  </line>
  <line no="1113">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1114">
    <token name="T_DOC_COMMENT">     * @param $filename</token>
  </line>
  <line no="1115">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1116">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsReadable()</token>
  </line>
  <line no="1117">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1118">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsReadable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filename</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1119">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsReadable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1120">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1121"/>
  <line no="1122">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1123">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1124">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1125">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1126">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of type resource.</token>
  </line>
  <line no="1127">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1128">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1129">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1130">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsResource()</token>
  </line>
  <line no="1131">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1132">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsResource</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1133">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsResource'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1134">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1135"/>
  <line no="1136">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1137">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1138">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1139">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1140">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of type scalar.</token>
  </line>
  <line no="1141">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1142">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1143">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1144">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsScalar()</token>
  </line>
  <line no="1145">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1146">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsScalar</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1147">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsScalar'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1148">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1149"/>
  <line no="1150">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1151">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1152">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1153">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1154">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of type string.</token>
  </line>
  <line no="1155">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1156">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1157">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1158">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsString()</token>
  </line>
  <line no="1159">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1160">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1161">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsString'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1162">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1163"/>
  <line no="1164">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1165">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1166">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1167">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1168">
    <token name="T_DOC_COMMENT">     * Asserts that a file/dir exists and is writable.</token>
  </line>
  <line no="1169">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1170">
    <token name="T_DOC_COMMENT">     * @param $filename</token>
  </line>
  <line no="1171">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1172">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertIsWritable()</token>
  </line>
  <line no="1173">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1174">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertIsWritable</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filename</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1175">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertIsWritable'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1176">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1177"/>
  <line no="1178">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1179">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1180">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1181">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1182">
    <token name="T_DOC_COMMENT">     * Asserts that a string is a valid JSON string.</token>
  </line>
  <line no="1183">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1184">
    <token name="T_DOC_COMMENT">     * @param string $actualJson</token>
  </line>
  <line no="1185">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1186">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertJson()</token>
  </line>
  <line no="1187">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1188">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1189">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertJson'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1190">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1191"/>
  <line no="1192">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1193">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1194">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1195">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1196">
    <token name="T_DOC_COMMENT">     * Asserts that two JSON files are equal.</token>
  </line>
  <line no="1197">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1198">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1199">
    <token name="T_DOC_COMMENT">     * @param string $actualFile</token>
  </line>
  <line no="1200">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1201">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertJsonFileEqualsJsonFile()</token>
  </line>
  <line no="1202">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1203">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJsonFileEqualsJsonFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1204">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertJsonFileEqualsJsonFile'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1205">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1206"/>
  <line no="1207">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1208">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1209">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1210">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1211">
    <token name="T_DOC_COMMENT">     * Asserts that two JSON files are not equal.</token>
  </line>
  <line no="1212">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1213">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1214">
    <token name="T_DOC_COMMENT">     * @param string $actualFile</token>
  </line>
  <line no="1215">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1216">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertJsonFileNotEqualsJsonFile()</token>
  </line>
  <line no="1217">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1218">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJsonFileNotEqualsJsonFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1219">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertJsonFileNotEqualsJsonFile'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1220">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1221"/>
  <line no="1222">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1223">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1224">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1225">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1226">
    <token name="T_DOC_COMMENT">     * Asserts that the generated JSON encoded object and the content of the given file are equal.</token>
  </line>
  <line no="1227">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1228">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1229">
    <token name="T_DOC_COMMENT">     * @param string $actualJson</token>
  </line>
  <line no="1230">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1231">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonFile()</token>
  </line>
  <line no="1232">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1233">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJsonStringEqualsJsonFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1234">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertJsonStringEqualsJsonFile'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1235">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1236"/>
  <line no="1237">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1238">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1239">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1240">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1241">
    <token name="T_DOC_COMMENT">     * Asserts that two given JSON encoded objects or arrays are equal.</token>
  </line>
  <line no="1242">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1243">
    <token name="T_DOC_COMMENT">     * @param string $expectedJson</token>
  </line>
  <line no="1244">
    <token name="T_DOC_COMMENT">     * @param string $actualJson</token>
  </line>
  <line no="1245">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1246">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonString()</token>
  </line>
  <line no="1247">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1248">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJsonStringEqualsJsonString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1249">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertJsonStringEqualsJsonString'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1250">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1251"/>
  <line no="1252">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1253">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1254">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1255">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1256">
    <token name="T_DOC_COMMENT">     * Asserts that the generated JSON encoded object and the content of the given file are not equal.</token>
  </line>
  <line no="1257">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1258">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1259">
    <token name="T_DOC_COMMENT">     * @param string $actualJson</token>
  </line>
  <line no="1260">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1261">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonFile()</token>
  </line>
  <line no="1262">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1263">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJsonStringNotEqualsJsonFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1264">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertJsonStringNotEqualsJsonFile'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1265">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1266"/>
  <line no="1267">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1268">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1269">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1270">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1271">
    <token name="T_DOC_COMMENT">     * Asserts that two given JSON encoded objects or arrays are not equal.</token>
  </line>
  <line no="1272">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1273">
    <token name="T_DOC_COMMENT">     * @param string $expectedJson</token>
  </line>
  <line no="1274">
    <token name="T_DOC_COMMENT">     * @param string $actualJson</token>
  </line>
  <line no="1275">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1276">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonString()</token>
  </line>
  <line no="1277">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1278">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJsonStringNotEqualsJsonString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1279">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertJsonStringNotEqualsJsonString'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1280">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1281"/>
  <line no="1282">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1283">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1284">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1285">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1286">
    <token name="T_DOC_COMMENT">     * Asserts that a value is smaller than another value.</token>
  </line>
  <line no="1287">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1288">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="1289">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1290">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1291">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertLessThan()</token>
  </line>
  <line no="1292">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1293">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertLessThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1294">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertLessThan'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1295">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1296"/>
  <line no="1297">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1298">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1299">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1300">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1301">
    <token name="T_DOC_COMMENT">     * Asserts that a value is smaller than or equal to another value.</token>
  </line>
  <line no="1302">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1303">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="1304">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1305">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1306">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertLessThanOrEqual()</token>
  </line>
  <line no="1307">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1308">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertLessThanOrEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1309">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertLessThanOrEqual'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1310">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1311"/>
  <line no="1312">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1313">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1314">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1315">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1316">
    <token name="T_DOC_COMMENT">     * Asserts that a string matches a given regular expression.</token>
  </line>
  <line no="1317">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1318">
    <token name="T_DOC_COMMENT">     * @param string $pattern</token>
  </line>
  <line no="1319">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1320">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1321">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertMatchesRegularExpression()</token>
  </line>
  <line no="1322">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1323">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertMatchesRegularExpression</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1324">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertMatchesRegularExpression'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1325">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1326"/>
  <line no="1327">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1328">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1329">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1330">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1331">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is nan.</token>
  </line>
  <line no="1332">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1333">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1334">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1335">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNan()</token>
  </line>
  <line no="1336">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1337">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1338">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNan'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1339">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1340"/>
  <line no="1341">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1342">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1343">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1344">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1345">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack does not contain a needle.</token>
  </line>
  <line no="1346">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1347">
    <token name="T_DOC_COMMENT">     * @param $needle</token>
  </line>
  <line no="1348">
    <token name="T_DOC_COMMENT">     * @param $haystack</token>
  </line>
  <line no="1349">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1350">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotContains()</token>
  </line>
  <line no="1351">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1352">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1353">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotContains'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1354">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1355"/>
  <line no="1356">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1357">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1358">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1359">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1360">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1361">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotContainsEquals()</token>
  </line>
  <line no="1362">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1363">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotContainsEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1364">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotContainsEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1365">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1366"/>
  <line no="1367">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1368">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1369">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1370">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1371">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack does not contain only values of a given type.</token>
  </line>
  <line no="1372">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1373">
    <token name="T_DOC_COMMENT">     * @param string $type</token>
  </line>
  <line no="1374">
    <token name="T_DOC_COMMENT">     * @param $haystack</token>
  </line>
  <line no="1375">
    <token name="T_DOC_COMMENT">     * @param bool|null $isNativeType</token>
  </line>
  <line no="1376">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1377">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotContainsOnly()</token>
  </line>
  <line no="1378">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1379">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotContainsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isNativeType</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1380">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotContainsOnly'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1381">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1382"/>
  <line no="1383">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1384">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1385">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1386">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1387">
    <token name="T_DOC_COMMENT">     * Asserts the number of elements of an array, Countable or Traversable.</token>
  </line>
  <line no="1388">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1389">
    <token name="T_DOC_COMMENT">     * @param int $expectedCount</token>
  </line>
  <line no="1390">
    <token name="T_DOC_COMMENT">     * @param Countable|iterable $haystack</token>
  </line>
  <line no="1391">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1392">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotCount()</token>
  </line>
  <line no="1393">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1394">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotCount</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedCount</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1395">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotCount'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1396">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1397"/>
  <line no="1398">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1399">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1400">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1401">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1402">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not empty.</token>
  </line>
  <line no="1403">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1404">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1405">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1406">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotEmpty()</token>
  </line>
  <line no="1407">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1408">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotEmpty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1409">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotEmpty'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1410">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1411"/>
  <line no="1412">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1413">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1414">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1415">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1416">
    <token name="T_DOC_COMMENT">     * Asserts that two variables are not equal.</token>
  </line>
  <line no="1417">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1418">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="1419">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1420">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1421">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotEquals()</token>
  </line>
  <line no="1422">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1423">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1424">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1425">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1426"/>
  <line no="1427">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1428">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1429">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1430">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1431">
    <token name="T_DOC_COMMENT">     * Asserts that two variables are not equal (canonicalizing).</token>
  </line>
  <line no="1432">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1433">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="1434">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1435">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1436">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsCanonicalizing()</token>
  </line>
  <line no="1437">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1438">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotEqualsCanonicalizing</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1439">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotEqualsCanonicalizing'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1440">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1441"/>
  <line no="1442">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1443">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1444">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1445">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1446">
    <token name="T_DOC_COMMENT">     * Asserts that two variables are not equal (ignoring case).</token>
  </line>
  <line no="1447">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1448">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="1449">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1450">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1451">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsIgnoringCase()</token>
  </line>
  <line no="1452">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1453">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotEqualsIgnoringCase</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1454">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotEqualsIgnoringCase'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1455">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1456"/>
  <line no="1457">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1458">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1459">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1460">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1461">
    <token name="T_DOC_COMMENT">     * Asserts that two variables are not equal (with delta).</token>
  </line>
  <line no="1462">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1463">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="1464">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1465">
    <token name="T_DOC_COMMENT">     * @param float $delta</token>
  </line>
  <line no="1466">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1467">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsWithDelta()</token>
  </line>
  <line no="1468">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1469">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotEqualsWithDelta</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1470">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotEqualsWithDelta'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1471">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1472"/>
  <line no="1473">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1474">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1475">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1476">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1477">
    <token name="T_DOC_COMMENT">     * Asserts that a condition is not false.</token>
  </line>
  <line no="1478">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1479">
    <token name="T_DOC_COMMENT">     * @param $condition</token>
  </line>
  <line no="1480">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1481">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotFalse()</token>
  </line>
  <line no="1482">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1483">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotFalse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$condition</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1484">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotFalse'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1485">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1486"/>
  <line no="1487">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1488">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1489">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1490">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1491">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of a given type.</token>
  </line>
  <line no="1492">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1493">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="1494">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1495">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1496">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotInstanceOf()</token>
  </line>
  <line no="1497">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1498">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotInstanceOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1499">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotInstanceOf'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1500">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1501"/>
  <line no="1502">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1503">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1504">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1505">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1506">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not null.</token>
  </line>
  <line no="1507">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1508">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1509">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1510">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotNull()</token>
  </line>
  <line no="1511">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1512">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotNull</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1513">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotNull'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1514">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1515"/>
  <line no="1516">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1517">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1518">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1519">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1520">
    <token name="T_DOC_COMMENT">     * Asserts that two variables do not have the same type and value.</token>
  </line>
  <line no="1521">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1522">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="1523">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1524">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1525">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotSame()</token>
  </line>
  <line no="1526">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1527">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotSame</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1528">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotSame'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1529">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1530"/>
  <line no="1531">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1532">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1533">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1534">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1535">
    <token name="T_DOC_COMMENT">     * Assert that the size of two arrays (or `Countable` or `Traversable` objects) is not the same.</token>
  </line>
  <line no="1536">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1537">
    <token name="T_DOC_COMMENT">     * @param Countable|iterable $expected</token>
  </line>
  <line no="1538">
    <token name="T_DOC_COMMENT">     * @param Countable|iterable $actual</token>
  </line>
  <line no="1539">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1540">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotSameSize()</token>
  </line>
  <line no="1541">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1542">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotSameSize</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1543">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotSameSize'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1544">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1545"/>
  <line no="1546">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1547">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1548">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1549">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1550">
    <token name="T_DOC_COMMENT">     * Asserts that a condition is not true.</token>
  </line>
  <line no="1551">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1552">
    <token name="T_DOC_COMMENT">     * @param $condition</token>
  </line>
  <line no="1553">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1554">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNotTrue()</token>
  </line>
  <line no="1555">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1556">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotTrue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$condition</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1557">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNotTrue'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1558">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1559"/>
  <line no="1560">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1561">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1562">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1563">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1564">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is null.</token>
  </line>
  <line no="1565">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1566">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1567">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1568">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertNull()</token>
  </line>
  <line no="1569">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1570">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNull</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1571">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertNull'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1572">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1573"/>
  <line no="1574">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1575">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1576">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1577">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1578">
    <token name="T_DOC_COMMENT">     * Asserts that an object has a specified attribute.</token>
  </line>
  <line no="1579">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1580">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="1581">
    <token name="T_DOC_COMMENT">     * @param object $object</token>
  </line>
  <line no="1582">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1583">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertObjectHasAttribute()</token>
  </line>
  <line no="1584">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1585">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertObjectHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1586">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertObjectHasAttribute'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1587">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1588"/>
  <line no="1589">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1590">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1591">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1592">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1593">
    <token name="T_DOC_COMMENT">     * Asserts that an object does not have a specified attribute.</token>
  </line>
  <line no="1594">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1595">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="1596">
    <token name="T_DOC_COMMENT">     * @param object $object</token>
  </line>
  <line no="1597">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1598">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertObjectNotHasAttribute()</token>
  </line>
  <line no="1599">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1600">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertObjectNotHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1601">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertObjectNotHasAttribute'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1602">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1603"/>
  <line no="1604">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1605">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1606">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1607">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1608">
    <token name="T_DOC_COMMENT">     * Asserts that two variables have the same type and value.</token>
  </line>
  <line no="1609">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1610">
    <token name="T_DOC_COMMENT">     * @param $expected</token>
  </line>
  <line no="1611">
    <token name="T_DOC_COMMENT">     * @param $actual</token>
  </line>
  <line no="1612">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1613">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertSame()</token>
  </line>
  <line no="1614">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1615">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertSame</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1616">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertSame'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1617">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1618"/>
  <line no="1619">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1620">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1621">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1622">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1623">
    <token name="T_DOC_COMMENT">     * Assert that the size of two arrays (or `Countable` or `Traversable` objects) is the same.</token>
  </line>
  <line no="1624">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1625">
    <token name="T_DOC_COMMENT">     * @param Countable|iterable $expected</token>
  </line>
  <line no="1626">
    <token name="T_DOC_COMMENT">     * @param Countable|iterable $actual</token>
  </line>
  <line no="1627">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1628">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertSameSize()</token>
  </line>
  <line no="1629">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1630">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertSameSize</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1631">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertSameSize'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1632">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1633"/>
  <line no="1634">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1635">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1636">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1637">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1638">
    <token name="T_DOC_COMMENT">     * @param string $needle</token>
  </line>
  <line no="1639">
    <token name="T_DOC_COMMENT">     * @param string $haystack</token>
  </line>
  <line no="1640">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1641">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringContainsString()</token>
  </line>
  <line no="1642">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1643">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringContainsString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1644">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringContainsString'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1645">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1646"/>
  <line no="1647">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1648">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1649">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1650">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1651">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1652">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringContainsStringIgnoringCase()</token>
  </line>
  <line no="1653">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1654">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringContainsStringIgnoringCase</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1655">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringContainsStringIgnoringCase'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1656">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1657"/>
  <line no="1658">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1659">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1660">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1661">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1662">
    <token name="T_DOC_COMMENT">     * Asserts that a string ends not with a given suffix.</token>
  </line>
  <line no="1663">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1664">
    <token name="T_DOC_COMMENT">     * @param string $suffix</token>
  </line>
  <line no="1665">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1666">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1667">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringEndsNotWith()</token>
  </line>
  <line no="1668">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1669">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringEndsNotWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$suffix</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1670">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringEndsNotWith'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1671">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1672"/>
  <line no="1673">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1674">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1675">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1676">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1677">
    <token name="T_DOC_COMMENT">     * Asserts that a string ends with a given suffix.</token>
  </line>
  <line no="1678">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1679">
    <token name="T_DOC_COMMENT">     * @param string $suffix</token>
  </line>
  <line no="1680">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1681">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1682">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringEndsWith()</token>
  </line>
  <line no="1683">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1684">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringEndsWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$suffix</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1685">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringEndsWith'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1686">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1687"/>
  <line no="1688">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1689">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1690">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1691">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1692">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of a string is equal to the contents of a file.</token>
  </line>
  <line no="1693">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1694">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1695">
    <token name="T_DOC_COMMENT">     * @param string $actualString</token>
  </line>
  <line no="1696">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1697">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFile()</token>
  </line>
  <line no="1698">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1699">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringEqualsFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualString</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1700">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringEqualsFile'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1701">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1702"/>
  <line no="1703">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1704">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1705">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1706">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1707">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of a string is equal to the contents of a file (canonicalizing).</token>
  </line>
  <line no="1708">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1709">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1710">
    <token name="T_DOC_COMMENT">     * @param string $actualString</token>
  </line>
  <line no="1711">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1712">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileCanonicalizing()</token>
  </line>
  <line no="1713">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1714">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringEqualsFileCanonicalizing</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualString</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1715">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringEqualsFileCanonicalizing'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1716">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1717"/>
  <line no="1718">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1719">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1720">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1721">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1722">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of a string is equal to the contents of a file (ignoring case).</token>
  </line>
  <line no="1723">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1724">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1725">
    <token name="T_DOC_COMMENT">     * @param string $actualString</token>
  </line>
  <line no="1726">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1727">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileIgnoringCase()</token>
  </line>
  <line no="1728">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1729">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringEqualsFileIgnoringCase</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualString</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1730">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringEqualsFileIgnoringCase'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1731">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1732"/>
  <line no="1733">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1734">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1735">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1736">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1737">
    <token name="T_DOC_COMMENT">     * Asserts that a string matches a given format string.</token>
  </line>
  <line no="1738">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1739">
    <token name="T_DOC_COMMENT">     * @param string $format</token>
  </line>
  <line no="1740">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1741">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1742">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormat()</token>
  </line>
  <line no="1743">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1744">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringMatchesFormat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$format</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1745">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringMatchesFormat'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1746">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1747"/>
  <line no="1748">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1749">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1750">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1751">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1752">
    <token name="T_DOC_COMMENT">     * Asserts that a string matches a given format file.</token>
  </line>
  <line no="1753">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1754">
    <token name="T_DOC_COMMENT">     * @param string $formatFile</token>
  </line>
  <line no="1755">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1756">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1757">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormatFile()</token>
  </line>
  <line no="1758">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1759">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringMatchesFormatFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$formatFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1760">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringMatchesFormatFile'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1761">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1762"/>
  <line no="1763">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1764">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1765">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1766">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1767">
    <token name="T_DOC_COMMENT">     * @param string $needle</token>
  </line>
  <line no="1768">
    <token name="T_DOC_COMMENT">     * @param string $haystack</token>
  </line>
  <line no="1769">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1770">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsString()</token>
  </line>
  <line no="1771">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1772">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringNotContainsString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1773">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringNotContainsString'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1774">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1775"/>
  <line no="1776">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1777">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1778">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1779">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1780">
    <token name="T_DOC_COMMENT">     * @param string $needle</token>
  </line>
  <line no="1781">
    <token name="T_DOC_COMMENT">     * @param string $haystack</token>
  </line>
  <line no="1782">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1783">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsStringIgnoringCase()</token>
  </line>
  <line no="1784">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1785">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringNotContainsStringIgnoringCase</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1786">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringNotContainsStringIgnoringCase'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1787">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1788"/>
  <line no="1789">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1790">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1791">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1792">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1793">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of a string is not equal to the contents of a file.</token>
  </line>
  <line no="1794">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1795">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1796">
    <token name="T_DOC_COMMENT">     * @param string $actualString</token>
  </line>
  <line no="1797">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1798">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFile()</token>
  </line>
  <line no="1799">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1800">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringNotEqualsFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualString</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1801">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringNotEqualsFile'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1802">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1803"/>
  <line no="1804">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1805">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1806">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1807">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1808">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of a string is not equal to the contents of a file (canonicalizing).</token>
  </line>
  <line no="1809">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1810">
    <token name="T_DOC_COMMENT">     * @param string $actualString</token>
  </line>
  <line no="1811">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1812">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileCanonicalizing()</token>
  </line>
  <line no="1813">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1814">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringNotEqualsFileCanonicalizing</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualString</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1815">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringNotEqualsFileCanonicalizing'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1816">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1817"/>
  <line no="1818">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1819">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1820">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1821">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1822">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of a string is not equal to the contents of a file (ignoring case).</token>
  </line>
  <line no="1823">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1824">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1825">
    <token name="T_DOC_COMMENT">     * @param string $actualString</token>
  </line>
  <line no="1826">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1827">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileIgnoringCase()</token>
  </line>
  <line no="1828">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1829">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringNotEqualsFileIgnoringCase</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualString</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1830">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringNotEqualsFileIgnoringCase'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1831">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1832"/>
  <line no="1833">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1834">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1835">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1836">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1837">
    <token name="T_DOC_COMMENT">     * Asserts that a string does not match a given format string.</token>
  </line>
  <line no="1838">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1839">
    <token name="T_DOC_COMMENT">     * @param string $format</token>
  </line>
  <line no="1840">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1841">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1842">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormat()</token>
  </line>
  <line no="1843">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1844">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringNotMatchesFormat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$format</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1845">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringNotMatchesFormat'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1846">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1847"/>
  <line no="1848">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1849">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1850">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1851">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1852">
    <token name="T_DOC_COMMENT">     * Asserts that a string does not match a given format string.</token>
  </line>
  <line no="1853">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1854">
    <token name="T_DOC_COMMENT">     * @param string $formatFile</token>
  </line>
  <line no="1855">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1856">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1857">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormatFile()</token>
  </line>
  <line no="1858">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1859">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringNotMatchesFormatFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$formatFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1860">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringNotMatchesFormatFile'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1861">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1862"/>
  <line no="1863">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1864">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1865">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1866">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1867">
    <token name="T_DOC_COMMENT">     * Asserts that a string starts not with a given prefix.</token>
  </line>
  <line no="1868">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1869">
    <token name="T_DOC_COMMENT">     * @param string $prefix</token>
  </line>
  <line no="1870">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1871">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1872">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringStartsNotWith()</token>
  </line>
  <line no="1873">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1874">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringStartsNotWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prefix</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1875">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringStartsNotWith'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1876">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1877"/>
  <line no="1878">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1879">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1880">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1881">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1882">
    <token name="T_DOC_COMMENT">     * Asserts that a string starts with a given prefix.</token>
  </line>
  <line no="1883">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1884">
    <token name="T_DOC_COMMENT">     * @param string $prefix</token>
  </line>
  <line no="1885">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1886">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1887">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertStringStartsWith()</token>
  </line>
  <line no="1888">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1889">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringStartsWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prefix</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1890">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertStringStartsWith'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1891">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1892"/>
  <line no="1893">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1894">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1895">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1896">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1897">
    <token name="T_DOC_COMMENT">     * Evaluates a PHPUnit\Framework\Constraint matcher object.</token>
  </line>
  <line no="1898">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1899">
    <token name="T_DOC_COMMENT">     * @param $value</token>
  </line>
  <line no="1900">
    <token name="T_DOC_COMMENT">     * @param Constraint $constraint</token>
  </line>
  <line no="1901">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1902">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertThat()</token>
  </line>
  <line no="1903">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1904">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1905">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertThat'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1906">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1907"/>
  <line no="1908">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1909">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1910">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1911">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1912">
    <token name="T_DOC_COMMENT">     * Asserts that a condition is true.</token>
  </line>
  <line no="1913">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1914">
    <token name="T_DOC_COMMENT">     * @param $condition</token>
  </line>
  <line no="1915">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1916">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertTrue()</token>
  </line>
  <line no="1917">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1918">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertTrue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$condition</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1919">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertTrue'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1920">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1921"/>
  <line no="1922">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1923">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1924">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1925">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1926">
    <token name="T_DOC_COMMENT">     * Asserts that two XML files are equal.</token>
  </line>
  <line no="1927">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1928">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1929">
    <token name="T_DOC_COMMENT">     * @param string $actualFile</token>
  </line>
  <line no="1930">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1931">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertXmlFileEqualsXmlFile()</token>
  </line>
  <line no="1932">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1933">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertXmlFileEqualsXmlFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1934">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertXmlFileEqualsXmlFile'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1935">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1936"/>
  <line no="1937">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1938">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1939">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1940">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1941">
    <token name="T_DOC_COMMENT">     * Asserts that two XML files are not equal.</token>
  </line>
  <line no="1942">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1943">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1944">
    <token name="T_DOC_COMMENT">     * @param string $actualFile</token>
  </line>
  <line no="1945">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1946">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertXmlFileNotEqualsXmlFile()</token>
  </line>
  <line no="1947">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1948">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertXmlFileNotEqualsXmlFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1949">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertXmlFileNotEqualsXmlFile'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1950">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1951"/>
  <line no="1952">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1953">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1954">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1955">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1956">
    <token name="T_DOC_COMMENT">     * Asserts that two XML documents are equal.</token>
  </line>
  <line no="1957">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1958">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1959">
    <token name="T_DOC_COMMENT">     * @param DOMDocument|string $actualXml</token>
  </line>
  <line no="1960">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1961">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlFile()</token>
  </line>
  <line no="1962">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1963">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertXmlStringEqualsXmlFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualXml</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1964">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertXmlStringEqualsXmlFile'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1965">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1966"/>
  <line no="1967">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1968">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1969">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1970">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1971">
    <token name="T_DOC_COMMENT">     * Asserts that two XML documents are equal.</token>
  </line>
  <line no="1972">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1973">
    <token name="T_DOC_COMMENT">     * @param DOMDocument|string $expectedXml</token>
  </line>
  <line no="1974">
    <token name="T_DOC_COMMENT">     * @param DOMDocument|string $actualXml</token>
  </line>
  <line no="1975">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1976">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlString()</token>
  </line>
  <line no="1977">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1978">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertXmlStringEqualsXmlString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedXml</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualXml</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1979">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertXmlStringEqualsXmlString'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1980">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1981"/>
  <line no="1982">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1983">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1984">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1985">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1986">
    <token name="T_DOC_COMMENT">     * Asserts that two XML documents are not equal.</token>
  </line>
  <line no="1987">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1988">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1989">
    <token name="T_DOC_COMMENT">     * @param DOMDocument|string $actualXml</token>
  </line>
  <line no="1990">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1991">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlFile()</token>
  </line>
  <line no="1992">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1993">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertXmlStringNotEqualsXmlFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualXml</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1994">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertXmlStringNotEqualsXmlFile'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1995">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1996"/>
  <line no="1997">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1998">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1999">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="2000">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2001">
    <token name="T_DOC_COMMENT">     * Asserts that two XML documents are not equal.</token>
  </line>
  <line no="2002">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2003">
    <token name="T_DOC_COMMENT">     * @param DOMDocument|string $expectedXml</token>
  </line>
  <line no="2004">
    <token name="T_DOC_COMMENT">     * @param DOMDocument|string $actualXml</token>
  </line>
  <line no="2005">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2006">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlString()</token>
  </line>
  <line no="2007">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2008">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertXmlStringNotEqualsXmlString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedXml</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualXml</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2009">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'assertXmlStringNotEqualsXmlString'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2010">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2011"/>
  <line no="2012">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="2013">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2014">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="2015">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2016">
    <token name="T_DOC_COMMENT">     * Fails a test with the given message.</token>
  </line>
  <line no="2017">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2018">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2019">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::fail()</token>
  </line>
  <line no="2020">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2021">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">fail</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2022">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'fail'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2023">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2024"/>
  <line no="2025">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="2026">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2027">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="2028">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2029">
    <token name="T_DOC_COMMENT">     * Mark the test as incomplete.</token>
  </line>
  <line no="2030">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2031">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2032">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::markTestIncomplete()</token>
  </line>
  <line no="2033">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2034">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">markTestIncomplete</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2035">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'markTestIncomplete'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2036">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2037"/>
  <line no="2038">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="2039">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2040">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="2041">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2042">
    <token name="T_DOC_COMMENT">     * Mark the test as skipped.</token>
  </line>
  <line no="2043">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2044">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2045">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\AbstractAsserts::markTestSkipped()</token>
  </line>
  <line no="2046">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2047">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">markTestSkipped</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2048">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'markTestSkipped'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2049">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2050">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2051"/>
</source>
