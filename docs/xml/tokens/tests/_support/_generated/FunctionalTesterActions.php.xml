<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="L:/Projects/Stash/StashApi-php-Dev/docs/../tests/_support/_generated" file="FunctionalTesterActions.php" realpath="L:/Projects/Stash/StashApi-php-Dev/tests/_support/_generated/FunctionalTesterActions.php" size="62849" time="2019-06-13T21:47:23+00:00" unixtime="1560462443" sha1="bef523ee83f2eeeb09fcc747a48a041ef8be7657" relative="tests/_support/_generated/FunctionalTesterActions.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php </token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_COMMENT">//[STAMP] 865089916f2d1c7c3f276c11164af1fa</token>
  </line>
  <line no="2">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">_generated</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3"/>
  <line no="4">
    <token name="T_COMMENT">// This class was automatically generated by build task</token>
  </line>
  <line no="5">
    <token name="T_COMMENT">// You should not change it manually as it will be overwritten on next build</token>
  </line>
  <line no="6">
    <token name="T_COMMENT">// @codingStandardsIgnoreFile</token>
  </line>
  <line no="7"/>
  <line no="8">
    <token name="T_TRAIT">trait</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">FunctionalTesterActions</token>
  </line>
  <line no="9">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="10">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT">     * @return \Codeception\Scenario</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="13">
    <token name="T_WHITESPACE">    </token>
    <token name="T_ABSTRACT">abstract</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PROTECTED">protected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="14"/>
  <line no="15">
    <token name="T_WHITESPACE">    </token>
  </line>
  <line no="16">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="17">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT">     * Sets HTTP header valid for all next requests. Use `deleteHeader` to unset it</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT">     * $I-&gt;haveHttpHeader('Content-Type', 'application/json');</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT">     * // all next requests will contain this header</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT">     * @param $name</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT">     * @param $value</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::haveHttpHeader()</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="34">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">haveHttpHeader</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="35">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'haveHttpHeader'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="36">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="37"/>
  <line no="38">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="39">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT">     * Deletes the header with the passed name.  Subsequent requests</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT">     * will not have the deleted header in its request.</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">     * Example:</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT">     * $I-&gt;haveHttpHeader('X-Requested-With', 'Codeception');</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT">     * $I-&gt;sendGET('test-headers.php');</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT">     * // ...</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT">     * $I-&gt;deleteHeader('X-Requested-With');</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT">     * $I-&gt;sendPOST('some-other-page.php');</token>
  </line>
  <line no="53">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="54">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="56">
    <token name="T_DOC_COMMENT">     * @param string $name the name of the header to delete.</token>
  </line>
  <line no="57">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="58">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::deleteHeader()</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="61">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">deleteHeader</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="62">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'deleteHeader'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="63">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="64"/>
  <line no="65">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="66">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="67">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="68">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="69">
    <token name="T_DOC_COMMENT">     * Checks over the given HTTP header and (optionally)</token>
  </line>
  <line no="70">
    <token name="T_DOC_COMMENT">     * its value, asserting that are there</token>
  </line>
  <line no="71">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="72">
    <token name="T_DOC_COMMENT">     * @param $name</token>
  </line>
  <line no="73">
    <token name="T_DOC_COMMENT">     * @param $value</token>
  </line>
  <line no="74">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="75">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="76">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="77">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeHttpHeader()</token>
  </line>
  <line no="78">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="79">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeHttpHeader</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="80">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeHttpHeader'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="81">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="82">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="83">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="84">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="85">
    <token name="T_DOC_COMMENT">     * Checks over the given HTTP header and (optionally)</token>
  </line>
  <line no="86">
    <token name="T_DOC_COMMENT">     * its value, asserting that are there</token>
  </line>
  <line no="87">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="88">
    <token name="T_DOC_COMMENT">     * @param $name</token>
  </line>
  <line no="89">
    <token name="T_DOC_COMMENT">     * @param $value</token>
  </line>
  <line no="90">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="91">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="92">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeHttpHeader()</token>
  </line>
  <line no="93">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="94">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeHttpHeader</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="95">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeHttpHeader'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="96">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="97"/>
  <line no="98">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="99">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="100">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="101">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="102">
    <token name="T_DOC_COMMENT">     * Checks over the given HTTP header and (optionally)</token>
  </line>
  <line no="103">
    <token name="T_DOC_COMMENT">     * its value, asserting that are not there</token>
  </line>
  <line no="104">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="105">
    <token name="T_DOC_COMMENT">     * @param $name</token>
  </line>
  <line no="106">
    <token name="T_DOC_COMMENT">     * @param $value</token>
  </line>
  <line no="107">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="108">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="109">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="110">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeHttpHeader()</token>
  </line>
  <line no="111">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="112">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">cantSeeHttpHeader</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="113">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeHttpHeader'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="114">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="115">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="116">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="117">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="118">
    <token name="T_DOC_COMMENT">     * Checks over the given HTTP header and (optionally)</token>
  </line>
  <line no="119">
    <token name="T_DOC_COMMENT">     * its value, asserting that are not there</token>
  </line>
  <line no="120">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="121">
    <token name="T_DOC_COMMENT">     * @param $name</token>
  </line>
  <line no="122">
    <token name="T_DOC_COMMENT">     * @param $value</token>
  </line>
  <line no="123">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="124">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="125">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeHttpHeader()</token>
  </line>
  <line no="126">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="127">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">dontSeeHttpHeader</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="128">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeHttpHeader'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="129">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="130"/>
  <line no="131">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="132">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="133">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="134">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="135">
    <token name="T_DOC_COMMENT">     * Checks that http response header is received only once.</token>
  </line>
  <line no="136">
    <token name="T_DOC_COMMENT">     * HTTP RFC2616 allows multiple response headers with the same name.</token>
  </line>
  <line no="137">
    <token name="T_DOC_COMMENT">     * You can check that you didn't accidentally sent the same header twice.</token>
  </line>
  <line no="138">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="139">
    <token name="T_DOC_COMMENT">     * ``` php</token>
  </line>
  <line no="140">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="141">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeHttpHeaderOnce('Cache-Control');</token>
  </line>
  <line no="142">
    <token name="T_DOC_COMMENT">     * ?&gt;&gt;</token>
  </line>
  <line no="143">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="144">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="145">
    <token name="T_DOC_COMMENT">     * @param $name</token>
  </line>
  <line no="146">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="147">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="148">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="149">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeHttpHeaderOnce()</token>
  </line>
  <line no="150">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="151">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeHttpHeaderOnce</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="152">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeHttpHeaderOnce'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="153">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="154">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="155">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="156">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="157">
    <token name="T_DOC_COMMENT">     * Checks that http response header is received only once.</token>
  </line>
  <line no="158">
    <token name="T_DOC_COMMENT">     * HTTP RFC2616 allows multiple response headers with the same name.</token>
  </line>
  <line no="159">
    <token name="T_DOC_COMMENT">     * You can check that you didn't accidentally sent the same header twice.</token>
  </line>
  <line no="160">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="161">
    <token name="T_DOC_COMMENT">     * ``` php</token>
  </line>
  <line no="162">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="163">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeHttpHeaderOnce('Cache-Control');</token>
  </line>
  <line no="164">
    <token name="T_DOC_COMMENT">     * ?&gt;&gt;</token>
  </line>
  <line no="165">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="166">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="167">
    <token name="T_DOC_COMMENT">     * @param $name</token>
  </line>
  <line no="168">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="169">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="170">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeHttpHeaderOnce()</token>
  </line>
  <line no="171">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="172">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeHttpHeaderOnce</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="173">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeHttpHeaderOnce'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="174">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="175"/>
  <line no="176">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="177">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="178">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="179">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="180">
    <token name="T_DOC_COMMENT">     * Returns the value of the specified header name</token>
  </line>
  <line no="181">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="182">
    <token name="T_DOC_COMMENT">     * @param $name</token>
  </line>
  <line no="183">
    <token name="T_DOC_COMMENT">     * @param Boolean $first Whether to return the first value or all header values</token>
  </line>
  <line no="184">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="185">
    <token name="T_DOC_COMMENT">     * @return string|array The first header value if $first is true, an array of values otherwise</token>
  </line>
  <line no="186">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="187">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="188">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::grabHttpHeader()</token>
  </line>
  <line no="189">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="190">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">grabHttpHeader</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$first</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="191">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'grabHttpHeader'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="192">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="193"/>
  <line no="194">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="195">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="196">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="197">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="198">
    <token name="T_DOC_COMMENT">     * Adds HTTP authentication via username/password.</token>
  </line>
  <line no="199">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="200">
    <token name="T_DOC_COMMENT">     * @param $username</token>
  </line>
  <line no="201">
    <token name="T_DOC_COMMENT">     * @param $password</token>
  </line>
  <line no="202">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="203">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="204">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::amHttpAuthenticated()</token>
  </line>
  <line no="205">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="206">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">amHttpAuthenticated</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$username</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$password</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="207">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Condition</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'amHttpAuthenticated'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="208">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="209"/>
  <line no="210">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="211">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="212">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="213">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="214">
    <token name="T_DOC_COMMENT">     * Adds Digest authentication via username/password.</token>
  </line>
  <line no="215">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="216">
    <token name="T_DOC_COMMENT">     * @param $username</token>
  </line>
  <line no="217">
    <token name="T_DOC_COMMENT">     * @param $password</token>
  </line>
  <line no="218">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="219">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="220">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::amDigestAuthenticated()</token>
  </line>
  <line no="221">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="222">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">amDigestAuthenticated</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$username</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$password</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="223">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Condition</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'amDigestAuthenticated'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="224">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="225"/>
  <line no="226">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="227">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="228">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="229">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="230">
    <token name="T_DOC_COMMENT">     * Adds Bearer authentication via access token.</token>
  </line>
  <line no="231">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="232">
    <token name="T_DOC_COMMENT">     * @param $accessToken</token>
  </line>
  <line no="233">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="234">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="235">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::amBearerAuthenticated()</token>
  </line>
  <line no="236">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="237">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">amBearerAuthenticated</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$accessToken</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="238">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Condition</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'amBearerAuthenticated'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="239">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="240"/>
  <line no="241">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="242">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="243">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="244">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="245">
    <token name="T_DOC_COMMENT">     * Adds NTLM authentication via username/password.</token>
  </line>
  <line no="246">
    <token name="T_DOC_COMMENT">     * Requires client to be Guzzle &gt;=6.3.0</token>
  </line>
  <line no="247">
    <token name="T_DOC_COMMENT">     * Out of scope for functional modules.</token>
  </line>
  <line no="248">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="249">
    <token name="T_DOC_COMMENT">     * Example:</token>
  </line>
  <line no="250">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="251">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="252">
    <token name="T_DOC_COMMENT">     * $I-&gt;amNTLMAuthenticated('jon_snow', 'targaryen');</token>
  </line>
  <line no="253">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="254">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="255">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="256">
    <token name="T_DOC_COMMENT">     * @param $username</token>
  </line>
  <line no="257">
    <token name="T_DOC_COMMENT">     * @param $password</token>
  </line>
  <line no="258">
    <token name="T_DOC_COMMENT">     * @throws ModuleException</token>
  </line>
  <line no="259">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="260">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="261">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::amNTLMAuthenticated()</token>
  </line>
  <line no="262">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="263">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">amNTLMAuthenticated</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$username</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$password</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="264">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Condition</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'amNTLMAuthenticated'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="265">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="266"/>
  <line no="267">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="268">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="269">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="270">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="271">
    <token name="T_DOC_COMMENT">     * Allows to send REST request using AWS Authorization</token>
  </line>
  <line no="272">
    <token name="T_DOC_COMMENT">     * Only works with PhpBrowser</token>
  </line>
  <line no="273">
    <token name="T_DOC_COMMENT">     * Example</token>
  </line>
  <line no="274">
    <token name="T_DOC_COMMENT">     * Config -</token>
  </line>
  <line no="275">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="276">
    <token name="T_DOC_COMMENT">     * modules:</token>
  </line>
  <line no="277">
    <token name="T_DOC_COMMENT">     *      enabled:</token>
  </line>
  <line no="278">
    <token name="T_DOC_COMMENT">     *          - REST:</token>
  </line>
  <line no="279">
    <token name="T_DOC_COMMENT">     *              aws:</token>
  </line>
  <line no="280">
    <token name="T_DOC_COMMENT">     *                  key: accessKey</token>
  </line>
  <line no="281">
    <token name="T_DOC_COMMENT">     *                  secret: accessSecret</token>
  </line>
  <line no="282">
    <token name="T_DOC_COMMENT">     *                  service: awsService</token>
  </line>
  <line no="283">
    <token name="T_DOC_COMMENT">     *                  region: awsRegion</token>
  </line>
  <line no="284">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="285">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="286">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="287">
    <token name="T_DOC_COMMENT">     * $I-&gt;amAWSAuthenticated();</token>
  </line>
  <line no="288">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="289">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="290">
    <token name="T_DOC_COMMENT">     * @param array $additionalAWSConfig</token>
  </line>
  <line no="291">
    <token name="T_DOC_COMMENT">     * @throws ModuleException</token>
  </line>
  <line no="292">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::amAWSAuthenticated()</token>
  </line>
  <line no="293">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="294">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">amAWSAuthenticated</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$additionalAWSConfig</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="295">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Condition</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'amAWSAuthenticated'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="296">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="297"/>
  <line no="298">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="299">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="300">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="301">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="302">
    <token name="T_DOC_COMMENT">     * Sends a POST request to given uri. Parameters and files can be provided separately.</token>
  </line>
  <line no="303">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="304">
    <token name="T_DOC_COMMENT">     * Example:</token>
  </line>
  <line no="305">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="306">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="307">
    <token name="T_DOC_COMMENT">     * //simple POST call</token>
  </line>
  <line no="308">
    <token name="T_DOC_COMMENT">     * $I-&gt;sendPOST('/message', ['subject' =&gt; 'Read this!', 'to' =&gt; 'johndoe@example.com']);</token>
  </line>
  <line no="309">
    <token name="T_DOC_COMMENT">     * //simple upload method</token>
  </line>
  <line no="310">
    <token name="T_DOC_COMMENT">     * $I-&gt;sendPOST('/message/24', ['inline' =&gt; 0], ['attachmentFile' =&gt; codecept_data_dir('sample_file.pdf')]);</token>
  </line>
  <line no="311">
    <token name="T_DOC_COMMENT">     * //uploading a file with a custom name and mime-type. This is also useful to simulate upload errors.</token>
  </line>
  <line no="312">
    <token name="T_DOC_COMMENT">     * $I-&gt;sendPOST('/message/24', ['inline' =&gt; 0], [</token>
  </line>
  <line no="313">
    <token name="T_DOC_COMMENT">     *     'attachmentFile' =&gt; [</token>
  </line>
  <line no="314">
    <token name="T_DOC_COMMENT">     *          'name' =&gt; 'document.pdf',</token>
  </line>
  <line no="315">
    <token name="T_DOC_COMMENT">     *          'type' =&gt; 'application/pdf',</token>
  </line>
  <line no="316">
    <token name="T_DOC_COMMENT">     *          'error' =&gt; UPLOAD_ERR_OK,</token>
  </line>
  <line no="317">
    <token name="T_DOC_COMMENT">     *          'size' =&gt; filesize(codecept_data_dir('sample_file.pdf')),</token>
  </line>
  <line no="318">
    <token name="T_DOC_COMMENT">     *          'tmp_name' =&gt; codecept_data_dir('sample_file.pdf')</token>
  </line>
  <line no="319">
    <token name="T_DOC_COMMENT">     *     ]</token>
  </line>
  <line no="320">
    <token name="T_DOC_COMMENT">     * ]);</token>
  </line>
  <line no="321">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="322">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="323">
    <token name="T_DOC_COMMENT">     * @param $url</token>
  </line>
  <line no="324">
    <token name="T_DOC_COMMENT">     * @param array|\JsonSerializable $params</token>
  </line>
  <line no="325">
    <token name="T_DOC_COMMENT">     * @param array $files A list of filenames or "mocks" of $_FILES (each entry being an array with the following</token>
  </line>
  <line no="326">
    <token name="T_DOC_COMMENT">     *                     keys: name, type, error, size, tmp_name (pointing to the real file path). Each key works</token>
  </line>
  <line no="327">
    <token name="T_DOC_COMMENT">     *                     as the "name" attribute of a file input field.</token>
  </line>
  <line no="328">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="329">
    <token name="T_DOC_COMMENT">     * @see http://php.net/manual/en/features.file-upload.post-method.php</token>
  </line>
  <line no="330">
    <token name="T_DOC_COMMENT">     * @see codecept_data_dir()</token>
  </line>
  <line no="331">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="332">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="333">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::sendPOST()</token>
  </line>
  <line no="334">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="335">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">sendPOST</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$url</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$params</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$files</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="336">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'sendPOST'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="337">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="338"/>
  <line no="339">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="340">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="341">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="342">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="343">
    <token name="T_DOC_COMMENT">     * Sends a HEAD request to given uri.</token>
  </line>
  <line no="344">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="345">
    <token name="T_DOC_COMMENT">     * @param $url</token>
  </line>
  <line no="346">
    <token name="T_DOC_COMMENT">     * @param array $params</token>
  </line>
  <line no="347">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="348">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="349">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::sendHEAD()</token>
  </line>
  <line no="350">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="351">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">sendHEAD</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$url</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$params</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="352">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'sendHEAD'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="353">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="354"/>
  <line no="355">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="356">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="357">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="358">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="359">
    <token name="T_DOC_COMMENT">     * Sends an OPTIONS request to given uri.</token>
  </line>
  <line no="360">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="361">
    <token name="T_DOC_COMMENT">     * @param $url</token>
  </line>
  <line no="362">
    <token name="T_DOC_COMMENT">     * @param array $params</token>
  </line>
  <line no="363">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="364">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="365">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::sendOPTIONS()</token>
  </line>
  <line no="366">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="367">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">sendOPTIONS</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$url</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$params</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="368">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'sendOPTIONS'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="369">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="370"/>
  <line no="371">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="372">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="373">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="374">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="375">
    <token name="T_DOC_COMMENT">     * Sends a GET request to given uri.</token>
  </line>
  <line no="376">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="377">
    <token name="T_DOC_COMMENT">     * @param $url</token>
  </line>
  <line no="378">
    <token name="T_DOC_COMMENT">     * @param array $params</token>
  </line>
  <line no="379">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="380">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="381">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::sendGET()</token>
  </line>
  <line no="382">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="383">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">sendGET</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$url</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$params</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="384">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'sendGET'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="385">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="386"/>
  <line no="387">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="388">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="389">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="390">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="391">
    <token name="T_DOC_COMMENT">     * Sends PUT request to given uri.</token>
  </line>
  <line no="392">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="393">
    <token name="T_DOC_COMMENT">     * @param $url</token>
  </line>
  <line no="394">
    <token name="T_DOC_COMMENT">     * @param array $params</token>
  </line>
  <line no="395">
    <token name="T_DOC_COMMENT">     * @param array $files</token>
  </line>
  <line no="396">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="397">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="398">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::sendPUT()</token>
  </line>
  <line no="399">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="400">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">sendPUT</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$url</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$params</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$files</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="401">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'sendPUT'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="402">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="403"/>
  <line no="404">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="405">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="406">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="407">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="408">
    <token name="T_DOC_COMMENT">     * Sends PATCH request to given uri.</token>
  </line>
  <line no="409">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="410">
    <token name="T_DOC_COMMENT">     * @param       $url</token>
  </line>
  <line no="411">
    <token name="T_DOC_COMMENT">     * @param array $params</token>
  </line>
  <line no="412">
    <token name="T_DOC_COMMENT">     * @param array $files</token>
  </line>
  <line no="413">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="414">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="415">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::sendPATCH()</token>
  </line>
  <line no="416">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="417">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">sendPATCH</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$url</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$params</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$files</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="418">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'sendPATCH'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="419">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="420"/>
  <line no="421">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="422">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="423">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="424">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="425">
    <token name="T_DOC_COMMENT">     * Sends DELETE request to given uri.</token>
  </line>
  <line no="426">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="427">
    <token name="T_DOC_COMMENT">     * @param $url</token>
  </line>
  <line no="428">
    <token name="T_DOC_COMMENT">     * @param array $params</token>
  </line>
  <line no="429">
    <token name="T_DOC_COMMENT">     * @param array $files</token>
  </line>
  <line no="430">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="431">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="432">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::sendDELETE()</token>
  </line>
  <line no="433">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="434">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">sendDELETE</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$url</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$params</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$files</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="435">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'sendDELETE'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="436">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="437"/>
  <line no="438">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="439">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="440">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="441">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="442">
    <token name="T_DOC_COMMENT">     * Sends LINK request to given uri.</token>
  </line>
  <line no="443">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="444">
    <token name="T_DOC_COMMENT">     * @param       $url</token>
  </line>
  <line no="445">
    <token name="T_DOC_COMMENT">     * @param array $linkEntries (entry is array with keys "uri" and "link-param")</token>
  </line>
  <line no="446">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="447">
    <token name="T_DOC_COMMENT">     * @link http://tools.ietf.org/html/rfc2068#section-19.6.2.4</token>
  </line>
  <line no="448">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="449">
    <token name="T_DOC_COMMENT">     * @author samva.ua@gmail.com</token>
  </line>
  <line no="450">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="451">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="452">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::sendLINK()</token>
  </line>
  <line no="453">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="454">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">sendLINK</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$url</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$linkEntries</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="455">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'sendLINK'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="456">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="457"/>
  <line no="458">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="459">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="460">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="461">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="462">
    <token name="T_DOC_COMMENT">     * Sends UNLINK request to given uri.</token>
  </line>
  <line no="463">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="464">
    <token name="T_DOC_COMMENT">     * @param       $url</token>
  </line>
  <line no="465">
    <token name="T_DOC_COMMENT">     * @param array $linkEntries (entry is array with keys "uri" and "link-param")</token>
  </line>
  <line no="466">
    <token name="T_DOC_COMMENT">     * @link http://tools.ietf.org/html/rfc2068#section-19.6.2.4</token>
  </line>
  <line no="467">
    <token name="T_DOC_COMMENT">     * @author samva.ua@gmail.com</token>
  </line>
  <line no="468">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="469">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="470">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::sendUNLINK()</token>
  </line>
  <line no="471">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="472">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">sendUNLINK</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$url</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$linkEntries</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="473">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'sendUNLINK'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="474">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="475"/>
  <line no="476">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="477">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="478">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="479">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="480">
    <token name="T_DOC_COMMENT">     * Checks whether last response was valid JSON.</token>
  </line>
  <line no="481">
    <token name="T_DOC_COMMENT">     * This is done with json_last_error function.</token>
  </line>
  <line no="482">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="483">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="484">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="485">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseIsJson()</token>
  </line>
  <line no="486">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="487">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeResponseIsJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="488">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseIsJson'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="489">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="490">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="491">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="492">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="493">
    <token name="T_DOC_COMMENT">     * Checks whether last response was valid JSON.</token>
  </line>
  <line no="494">
    <token name="T_DOC_COMMENT">     * This is done with json_last_error function.</token>
  </line>
  <line no="495">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="496">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="497">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseIsJson()</token>
  </line>
  <line no="498">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="499">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeResponseIsJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="500">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseIsJson'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="501">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="502"/>
  <line no="503">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="504">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="505">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="506">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="507">
    <token name="T_DOC_COMMENT">     * Checks whether the last response contains text.</token>
  </line>
  <line no="508">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="509">
    <token name="T_DOC_COMMENT">     * @param $text</token>
  </line>
  <line no="510">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="511">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="512">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="513">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseContains()</token>
  </line>
  <line no="514">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="515">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeResponseContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$text</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="516">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseContains'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="517">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="518">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="519">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="520">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="521">
    <token name="T_DOC_COMMENT">     * Checks whether the last response contains text.</token>
  </line>
  <line no="522">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="523">
    <token name="T_DOC_COMMENT">     * @param $text</token>
  </line>
  <line no="524">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="525">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="526">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseContains()</token>
  </line>
  <line no="527">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="528">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeResponseContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$text</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="529">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseContains'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="530">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="531"/>
  <line no="532">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="533">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="534">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="535">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="536">
    <token name="T_DOC_COMMENT">     * Checks whether last response do not contain text.</token>
  </line>
  <line no="537">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="538">
    <token name="T_DOC_COMMENT">     * @param $text</token>
  </line>
  <line no="539">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="540">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="541">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="542">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeResponseContains()</token>
  </line>
  <line no="543">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="544">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">cantSeeResponseContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$text</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="545">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeResponseContains'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="546">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="547">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="548">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="549">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="550">
    <token name="T_DOC_COMMENT">     * Checks whether last response do not contain text.</token>
  </line>
  <line no="551">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="552">
    <token name="T_DOC_COMMENT">     * @param $text</token>
  </line>
  <line no="553">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="554">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="555">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeResponseContains()</token>
  </line>
  <line no="556">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="557">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">dontSeeResponseContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$text</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="558">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeResponseContains'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="559">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="560"/>
  <line no="561">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="562">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="563">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="564">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="565">
    <token name="T_DOC_COMMENT">     * Checks whether the last JSON response contains provided array.</token>
  </line>
  <line no="566">
    <token name="T_DOC_COMMENT">     * The response is converted to array with json_decode($response, true)</token>
  </line>
  <line no="567">
    <token name="T_DOC_COMMENT">     * Thus, JSON is represented by associative array.</token>
  </line>
  <line no="568">
    <token name="T_DOC_COMMENT">     * This method matches that response array contains provided array.</token>
  </line>
  <line no="569">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="570">
    <token name="T_DOC_COMMENT">     * Examples:</token>
  </line>
  <line no="571">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="572">
    <token name="T_DOC_COMMENT">     * ``` php</token>
  </line>
  <line no="573">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="574">
    <token name="T_DOC_COMMENT">     * // response: {name: john, email: john@gmail.com}</token>
  </line>
  <line no="575">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseContainsJson(array('name' =&gt; 'john'));</token>
  </line>
  <line no="576">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="577">
    <token name="T_DOC_COMMENT">     * // response {user: john, profile: { email: john@gmail.com }}</token>
  </line>
  <line no="578">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseContainsJson(array('email' =&gt; 'john@gmail.com'));</token>
  </line>
  <line no="579">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="580">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="581">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="582">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="583">
    <token name="T_DOC_COMMENT">     * This method recursively checks if one array can be found inside of another.</token>
  </line>
  <line no="584">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="585">
    <token name="T_DOC_COMMENT">     * @param array $json</token>
  </line>
  <line no="586">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="587">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="588">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseContainsJson()</token>
  </line>
  <line no="589">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="590">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeResponseContainsJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$json</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="591">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseContainsJson'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="592">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="593">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="594">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="595">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="596">
    <token name="T_DOC_COMMENT">     * Checks whether the last JSON response contains provided array.</token>
  </line>
  <line no="597">
    <token name="T_DOC_COMMENT">     * The response is converted to array with json_decode($response, true)</token>
  </line>
  <line no="598">
    <token name="T_DOC_COMMENT">     * Thus, JSON is represented by associative array.</token>
  </line>
  <line no="599">
    <token name="T_DOC_COMMENT">     * This method matches that response array contains provided array.</token>
  </line>
  <line no="600">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="601">
    <token name="T_DOC_COMMENT">     * Examples:</token>
  </line>
  <line no="602">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="603">
    <token name="T_DOC_COMMENT">     * ``` php</token>
  </line>
  <line no="604">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="605">
    <token name="T_DOC_COMMENT">     * // response: {name: john, email: john@gmail.com}</token>
  </line>
  <line no="606">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseContainsJson(array('name' =&gt; 'john'));</token>
  </line>
  <line no="607">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="608">
    <token name="T_DOC_COMMENT">     * // response {user: john, profile: { email: john@gmail.com }}</token>
  </line>
  <line no="609">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseContainsJson(array('email' =&gt; 'john@gmail.com'));</token>
  </line>
  <line no="610">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="611">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="612">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="613">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="614">
    <token name="T_DOC_COMMENT">     * This method recursively checks if one array can be found inside of another.</token>
  </line>
  <line no="615">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="616">
    <token name="T_DOC_COMMENT">     * @param array $json</token>
  </line>
  <line no="617">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="618">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseContainsJson()</token>
  </line>
  <line no="619">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="620">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeResponseContainsJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$json</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="621">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseContainsJson'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="622">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="623"/>
  <line no="624">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="625">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="626">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="627">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="628">
    <token name="T_DOC_COMMENT">     * Returns current response so that it can be used in next scenario steps.</token>
  </line>
  <line no="629">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="630">
    <token name="T_DOC_COMMENT">     * Example:</token>
  </line>
  <line no="631">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="632">
    <token name="T_DOC_COMMENT">     * ``` php</token>
  </line>
  <line no="633">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="634">
    <token name="T_DOC_COMMENT">     * $user_id = $I-&gt;grabResponse();</token>
  </line>
  <line no="635">
    <token name="T_DOC_COMMENT">     * $I-&gt;sendPUT('/user', array('id' =&gt; $user_id, 'name' =&gt; 'davert'));</token>
  </line>
  <line no="636">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="637">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="638">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="639">
    <token name="T_DOC_COMMENT">     * @version 1.1</token>
  </line>
  <line no="640">
    <token name="T_DOC_COMMENT">     * @return string</token>
  </line>
  <line no="641">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="642">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="643">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::grabResponse()</token>
  </line>
  <line no="644">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="645">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">grabResponse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="646">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'grabResponse'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="647">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="648"/>
  <line no="649">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="650">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="651">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="652">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="653">
    <token name="T_DOC_COMMENT">     * Returns data from the current JSON response using [JSONPath](http://goessner.net/articles/JsonPath/) as selector.</token>
  </line>
  <line no="654">
    <token name="T_DOC_COMMENT">     * JsonPath is XPath equivalent for querying Json structures.</token>
  </line>
  <line no="655">
    <token name="T_DOC_COMMENT">     * Try your JsonPath expressions [online](http://jsonpath.curiousconcept.com/).</token>
  </line>
  <line no="656">
    <token name="T_DOC_COMMENT">     * Even for a single value an array is returned.</token>
  </line>
  <line no="657">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="658">
    <token name="T_DOC_COMMENT">     * This method **require [`flow/jsonpath` &gt; 0.2](https://github.com/FlowCommunications/JSONPath/) library to be installed**.</token>
  </line>
  <line no="659">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="660">
    <token name="T_DOC_COMMENT">     * Example:</token>
  </line>
  <line no="661">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="662">
    <token name="T_DOC_COMMENT">     * ``` php</token>
  </line>
  <line no="663">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="664">
    <token name="T_DOC_COMMENT">     * // match the first `user.id` in json</token>
  </line>
  <line no="665">
    <token name="T_DOC_COMMENT">     * $firstUserId = $I-&gt;grabDataFromResponseByJsonPath('$..users[0].id');</token>
  </line>
  <line no="666">
    <token name="T_DOC_COMMENT">     * $I-&gt;sendPUT('/user', array('id' =&gt; $firstUserId[0], 'name' =&gt; 'davert'));</token>
  </line>
  <line no="667">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="668">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="669">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="670">
    <token name="T_DOC_COMMENT">     * @param string $jsonPath</token>
  </line>
  <line no="671">
    <token name="T_DOC_COMMENT">     * @return array Array of matching items</token>
  </line>
  <line no="672">
    <token name="T_DOC_COMMENT">     * @version 2.0.9</token>
  </line>
  <line no="673">
    <token name="T_DOC_COMMENT">     * @throws \Exception</token>
  </line>
  <line no="674">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="675">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::grabDataFromResponseByJsonPath()</token>
  </line>
  <line no="676">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="677">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">grabDataFromResponseByJsonPath</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$jsonPath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="678">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'grabDataFromResponseByJsonPath'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="679">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="680"/>
  <line no="681">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="682">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="683">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="684">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="685">
    <token name="T_DOC_COMMENT">     * Checks if json structure in response matches the xpath provided.</token>
  </line>
  <line no="686">
    <token name="T_DOC_COMMENT">     * JSON is not supposed to be checked against XPath, yet it can be converted to xml and used with XPath.</token>
  </line>
  <line no="687">
    <token name="T_DOC_COMMENT">     * This assertion allows you to check the structure of response json.</token>
  </line>
  <line no="688">
    <token name="T_DOC_COMMENT">     *     *</token>
  </line>
  <line no="689">
    <token name="T_DOC_COMMENT">     * ```json</token>
  </line>
  <line no="690">
    <token name="T_DOC_COMMENT">     *   { "store": {</token>
  </line>
  <line no="691">
    <token name="T_DOC_COMMENT">     *       "book": [</token>
  </line>
  <line no="692">
    <token name="T_DOC_COMMENT">     *         { "category": "reference",</token>
  </line>
  <line no="693">
    <token name="T_DOC_COMMENT">     *           "author": "Nigel Rees",</token>
  </line>
  <line no="694">
    <token name="T_DOC_COMMENT">     *           "title": "Sayings of the Century",</token>
  </line>
  <line no="695">
    <token name="T_DOC_COMMENT">     *           "price": 8.95</token>
  </line>
  <line no="696">
    <token name="T_DOC_COMMENT">     *         },</token>
  </line>
  <line no="697">
    <token name="T_DOC_COMMENT">     *         { "category": "fiction",</token>
  </line>
  <line no="698">
    <token name="T_DOC_COMMENT">     *           "author": "Evelyn Waugh",</token>
  </line>
  <line no="699">
    <token name="T_DOC_COMMENT">     *           "title": "Sword of Honour",</token>
  </line>
  <line no="700">
    <token name="T_DOC_COMMENT">     *           "price": 12.99</token>
  </line>
  <line no="701">
    <token name="T_DOC_COMMENT">     *         }</token>
  </line>
  <line no="702">
    <token name="T_DOC_COMMENT">     *    ],</token>
  </line>
  <line no="703">
    <token name="T_DOC_COMMENT">     *       "bicycle": {</token>
  </line>
  <line no="704">
    <token name="T_DOC_COMMENT">     *         "color": "red",</token>
  </line>
  <line no="705">
    <token name="T_DOC_COMMENT">     *         "price": 19.95</token>
  </line>
  <line no="706">
    <token name="T_DOC_COMMENT">     *       }</token>
  </line>
  <line no="707">
    <token name="T_DOC_COMMENT">     *     }</token>
  </line>
  <line no="708">
    <token name="T_DOC_COMMENT">     *   }</token>
  </line>
  <line no="709">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="710">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="711">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="712">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="713">
    <token name="T_DOC_COMMENT">     * // at least one book in store has author</token>
  </line>
  <line no="714">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseJsonMatchesXpath('//store/book/author');</token>
  </line>
  <line no="715">
    <token name="T_DOC_COMMENT">     * // first book in store has author</token>
  </line>
  <line no="716">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseJsonMatchesXpath('//store/book[1]/author');</token>
  </line>
  <line no="717">
    <token name="T_DOC_COMMENT">     * // at least one item in store has price</token>
  </line>
  <line no="718">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseJsonMatchesXpath('/store//price');</token>
  </line>
  <line no="719">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="720">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="721">
    <token name="T_DOC_COMMENT">     * @param string $xpath</token>
  </line>
  <line no="722">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="723">
    <token name="T_DOC_COMMENT">     * @version 2.0.9</token>
  </line>
  <line no="724">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="725">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseJsonMatchesXpath()</token>
  </line>
  <line no="726">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="727">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeResponseJsonMatchesXpath</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xpath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="728">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseJsonMatchesXpath'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="729">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="730">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="731">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="732">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="733">
    <token name="T_DOC_COMMENT">     * Checks if json structure in response matches the xpath provided.</token>
  </line>
  <line no="734">
    <token name="T_DOC_COMMENT">     * JSON is not supposed to be checked against XPath, yet it can be converted to xml and used with XPath.</token>
  </line>
  <line no="735">
    <token name="T_DOC_COMMENT">     * This assertion allows you to check the structure of response json.</token>
  </line>
  <line no="736">
    <token name="T_DOC_COMMENT">     *     *</token>
  </line>
  <line no="737">
    <token name="T_DOC_COMMENT">     * ```json</token>
  </line>
  <line no="738">
    <token name="T_DOC_COMMENT">     *   { "store": {</token>
  </line>
  <line no="739">
    <token name="T_DOC_COMMENT">     *       "book": [</token>
  </line>
  <line no="740">
    <token name="T_DOC_COMMENT">     *         { "category": "reference",</token>
  </line>
  <line no="741">
    <token name="T_DOC_COMMENT">     *           "author": "Nigel Rees",</token>
  </line>
  <line no="742">
    <token name="T_DOC_COMMENT">     *           "title": "Sayings of the Century",</token>
  </line>
  <line no="743">
    <token name="T_DOC_COMMENT">     *           "price": 8.95</token>
  </line>
  <line no="744">
    <token name="T_DOC_COMMENT">     *         },</token>
  </line>
  <line no="745">
    <token name="T_DOC_COMMENT">     *         { "category": "fiction",</token>
  </line>
  <line no="746">
    <token name="T_DOC_COMMENT">     *           "author": "Evelyn Waugh",</token>
  </line>
  <line no="747">
    <token name="T_DOC_COMMENT">     *           "title": "Sword of Honour",</token>
  </line>
  <line no="748">
    <token name="T_DOC_COMMENT">     *           "price": 12.99</token>
  </line>
  <line no="749">
    <token name="T_DOC_COMMENT">     *         }</token>
  </line>
  <line no="750">
    <token name="T_DOC_COMMENT">     *    ],</token>
  </line>
  <line no="751">
    <token name="T_DOC_COMMENT">     *       "bicycle": {</token>
  </line>
  <line no="752">
    <token name="T_DOC_COMMENT">     *         "color": "red",</token>
  </line>
  <line no="753">
    <token name="T_DOC_COMMENT">     *         "price": 19.95</token>
  </line>
  <line no="754">
    <token name="T_DOC_COMMENT">     *       }</token>
  </line>
  <line no="755">
    <token name="T_DOC_COMMENT">     *     }</token>
  </line>
  <line no="756">
    <token name="T_DOC_COMMENT">     *   }</token>
  </line>
  <line no="757">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="758">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="759">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="760">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="761">
    <token name="T_DOC_COMMENT">     * // at least one book in store has author</token>
  </line>
  <line no="762">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseJsonMatchesXpath('//store/book/author');</token>
  </line>
  <line no="763">
    <token name="T_DOC_COMMENT">     * // first book in store has author</token>
  </line>
  <line no="764">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseJsonMatchesXpath('//store/book[1]/author');</token>
  </line>
  <line no="765">
    <token name="T_DOC_COMMENT">     * // at least one item in store has price</token>
  </line>
  <line no="766">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseJsonMatchesXpath('/store//price');</token>
  </line>
  <line no="767">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="768">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="769">
    <token name="T_DOC_COMMENT">     * @param string $xpath</token>
  </line>
  <line no="770">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="771">
    <token name="T_DOC_COMMENT">     * @version 2.0.9</token>
  </line>
  <line no="772">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseJsonMatchesXpath()</token>
  </line>
  <line no="773">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="774">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeResponseJsonMatchesXpath</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xpath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="775">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseJsonMatchesXpath'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="776">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="777"/>
  <line no="778">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="779">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="780">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="781">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="782">
    <token name="T_DOC_COMMENT">     * Opposite to seeResponseJsonMatchesXpath</token>
  </line>
  <line no="783">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="784">
    <token name="T_DOC_COMMENT">     * @param string $xpath</token>
  </line>
  <line no="785">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="786">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="787">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeResponseJsonMatchesXpath()</token>
  </line>
  <line no="788">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="789">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">cantSeeResponseJsonMatchesXpath</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xpath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="790">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeResponseJsonMatchesXpath'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="791">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="792">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="793">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="794">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="795">
    <token name="T_DOC_COMMENT">     * Opposite to seeResponseJsonMatchesXpath</token>
  </line>
  <line no="796">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="797">
    <token name="T_DOC_COMMENT">     * @param string $xpath</token>
  </line>
  <line no="798">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="799">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeResponseJsonMatchesXpath()</token>
  </line>
  <line no="800">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="801">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">dontSeeResponseJsonMatchesXpath</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xpath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="802">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeResponseJsonMatchesXpath'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="803">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="804"/>
  <line no="805">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="806">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="807">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="808">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="809">
    <token name="T_DOC_COMMENT">     * Checks if json structure in response matches [JsonPath](http://goessner.net/articles/JsonPath/).</token>
  </line>
  <line no="810">
    <token name="T_DOC_COMMENT">     * JsonPath is XPath equivalent for querying Json structures.</token>
  </line>
  <line no="811">
    <token name="T_DOC_COMMENT">     * Try your JsonPath expressions [online](http://jsonpath.curiousconcept.com/).</token>
  </line>
  <line no="812">
    <token name="T_DOC_COMMENT">     * This assertion allows you to check the structure of response json.</token>
  </line>
  <line no="813">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="814">
    <token name="T_DOC_COMMENT">     * This method **require [`flow/jsonpath` &gt; 0.2](https://github.com/FlowCommunications/JSONPath/) library to be installed**.</token>
  </line>
  <line no="815">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="816">
    <token name="T_DOC_COMMENT">     * ```json</token>
  </line>
  <line no="817">
    <token name="T_DOC_COMMENT">     *   { "store": {</token>
  </line>
  <line no="818">
    <token name="T_DOC_COMMENT">     *       "book": [</token>
  </line>
  <line no="819">
    <token name="T_DOC_COMMENT">     *         { "category": "reference",</token>
  </line>
  <line no="820">
    <token name="T_DOC_COMMENT">     *           "author": "Nigel Rees",</token>
  </line>
  <line no="821">
    <token name="T_DOC_COMMENT">     *           "title": "Sayings of the Century",</token>
  </line>
  <line no="822">
    <token name="T_DOC_COMMENT">     *           "price": 8.95</token>
  </line>
  <line no="823">
    <token name="T_DOC_COMMENT">     *         },</token>
  </line>
  <line no="824">
    <token name="T_DOC_COMMENT">     *         { "category": "fiction",</token>
  </line>
  <line no="825">
    <token name="T_DOC_COMMENT">     *           "author": "Evelyn Waugh",</token>
  </line>
  <line no="826">
    <token name="T_DOC_COMMENT">     *           "title": "Sword of Honour",</token>
  </line>
  <line no="827">
    <token name="T_DOC_COMMENT">     *           "price": 12.99</token>
  </line>
  <line no="828">
    <token name="T_DOC_COMMENT">     *         }</token>
  </line>
  <line no="829">
    <token name="T_DOC_COMMENT">     *    ],</token>
  </line>
  <line no="830">
    <token name="T_DOC_COMMENT">     *       "bicycle": {</token>
  </line>
  <line no="831">
    <token name="T_DOC_COMMENT">     *         "color": "red",</token>
  </line>
  <line no="832">
    <token name="T_DOC_COMMENT">     *         "price": 19.95</token>
  </line>
  <line no="833">
    <token name="T_DOC_COMMENT">     *       }</token>
  </line>
  <line no="834">
    <token name="T_DOC_COMMENT">     *     }</token>
  </line>
  <line no="835">
    <token name="T_DOC_COMMENT">     *   }</token>
  </line>
  <line no="836">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="837">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="838">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="839">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="840">
    <token name="T_DOC_COMMENT">     * // at least one book in store has author</token>
  </line>
  <line no="841">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseJsonMatchesJsonPath('$.store.book[*].author');</token>
  </line>
  <line no="842">
    <token name="T_DOC_COMMENT">     * // first book in store has author</token>
  </line>
  <line no="843">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseJsonMatchesJsonPath('$.store.book[0].author');</token>
  </line>
  <line no="844">
    <token name="T_DOC_COMMENT">     * // at least one item in store has price</token>
  </line>
  <line no="845">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseJsonMatchesJsonPath('$.store..price');</token>
  </line>
  <line no="846">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="847">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="848">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="849">
    <token name="T_DOC_COMMENT">     * @param string $jsonPath</token>
  </line>
  <line no="850">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="851">
    <token name="T_DOC_COMMENT">     * @version 2.0.9</token>
  </line>
  <line no="852">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="853">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseJsonMatchesJsonPath()</token>
  </line>
  <line no="854">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="855">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeResponseJsonMatchesJsonPath</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$jsonPath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="856">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseJsonMatchesJsonPath'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="857">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="858">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="859">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="860">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="861">
    <token name="T_DOC_COMMENT">     * Checks if json structure in response matches [JsonPath](http://goessner.net/articles/JsonPath/).</token>
  </line>
  <line no="862">
    <token name="T_DOC_COMMENT">     * JsonPath is XPath equivalent for querying Json structures.</token>
  </line>
  <line no="863">
    <token name="T_DOC_COMMENT">     * Try your JsonPath expressions [online](http://jsonpath.curiousconcept.com/).</token>
  </line>
  <line no="864">
    <token name="T_DOC_COMMENT">     * This assertion allows you to check the structure of response json.</token>
  </line>
  <line no="865">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="866">
    <token name="T_DOC_COMMENT">     * This method **require [`flow/jsonpath` &gt; 0.2](https://github.com/FlowCommunications/JSONPath/) library to be installed**.</token>
  </line>
  <line no="867">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="868">
    <token name="T_DOC_COMMENT">     * ```json</token>
  </line>
  <line no="869">
    <token name="T_DOC_COMMENT">     *   { "store": {</token>
  </line>
  <line no="870">
    <token name="T_DOC_COMMENT">     *       "book": [</token>
  </line>
  <line no="871">
    <token name="T_DOC_COMMENT">     *         { "category": "reference",</token>
  </line>
  <line no="872">
    <token name="T_DOC_COMMENT">     *           "author": "Nigel Rees",</token>
  </line>
  <line no="873">
    <token name="T_DOC_COMMENT">     *           "title": "Sayings of the Century",</token>
  </line>
  <line no="874">
    <token name="T_DOC_COMMENT">     *           "price": 8.95</token>
  </line>
  <line no="875">
    <token name="T_DOC_COMMENT">     *         },</token>
  </line>
  <line no="876">
    <token name="T_DOC_COMMENT">     *         { "category": "fiction",</token>
  </line>
  <line no="877">
    <token name="T_DOC_COMMENT">     *           "author": "Evelyn Waugh",</token>
  </line>
  <line no="878">
    <token name="T_DOC_COMMENT">     *           "title": "Sword of Honour",</token>
  </line>
  <line no="879">
    <token name="T_DOC_COMMENT">     *           "price": 12.99</token>
  </line>
  <line no="880">
    <token name="T_DOC_COMMENT">     *         }</token>
  </line>
  <line no="881">
    <token name="T_DOC_COMMENT">     *    ],</token>
  </line>
  <line no="882">
    <token name="T_DOC_COMMENT">     *       "bicycle": {</token>
  </line>
  <line no="883">
    <token name="T_DOC_COMMENT">     *         "color": "red",</token>
  </line>
  <line no="884">
    <token name="T_DOC_COMMENT">     *         "price": 19.95</token>
  </line>
  <line no="885">
    <token name="T_DOC_COMMENT">     *       }</token>
  </line>
  <line no="886">
    <token name="T_DOC_COMMENT">     *     }</token>
  </line>
  <line no="887">
    <token name="T_DOC_COMMENT">     *   }</token>
  </line>
  <line no="888">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="889">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="890">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="891">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="892">
    <token name="T_DOC_COMMENT">     * // at least one book in store has author</token>
  </line>
  <line no="893">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseJsonMatchesJsonPath('$.store.book[*].author');</token>
  </line>
  <line no="894">
    <token name="T_DOC_COMMENT">     * // first book in store has author</token>
  </line>
  <line no="895">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseJsonMatchesJsonPath('$.store.book[0].author');</token>
  </line>
  <line no="896">
    <token name="T_DOC_COMMENT">     * // at least one item in store has price</token>
  </line>
  <line no="897">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseJsonMatchesJsonPath('$.store..price');</token>
  </line>
  <line no="898">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="899">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="900">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="901">
    <token name="T_DOC_COMMENT">     * @param string $jsonPath</token>
  </line>
  <line no="902">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="903">
    <token name="T_DOC_COMMENT">     * @version 2.0.9</token>
  </line>
  <line no="904">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseJsonMatchesJsonPath()</token>
  </line>
  <line no="905">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="906">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeResponseJsonMatchesJsonPath</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$jsonPath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="907">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseJsonMatchesJsonPath'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="908">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="909"/>
  <line no="910">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="911">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="912">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="913">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="914">
    <token name="T_DOC_COMMENT">     * Opposite to seeResponseJsonMatchesJsonPath</token>
  </line>
  <line no="915">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="916">
    <token name="T_DOC_COMMENT">     * @param string $jsonPath</token>
  </line>
  <line no="917">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="918">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="919">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeResponseJsonMatchesJsonPath()</token>
  </line>
  <line no="920">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="921">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">cantSeeResponseJsonMatchesJsonPath</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$jsonPath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="922">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeResponseJsonMatchesJsonPath'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="923">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="924">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="925">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="926">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="927">
    <token name="T_DOC_COMMENT">     * Opposite to seeResponseJsonMatchesJsonPath</token>
  </line>
  <line no="928">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="929">
    <token name="T_DOC_COMMENT">     * @param string $jsonPath</token>
  </line>
  <line no="930">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="931">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeResponseJsonMatchesJsonPath()</token>
  </line>
  <line no="932">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="933">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">dontSeeResponseJsonMatchesJsonPath</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$jsonPath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="934">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeResponseJsonMatchesJsonPath'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="935">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="936"/>
  <line no="937">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="938">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="939">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="940">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="941">
    <token name="T_DOC_COMMENT">     * Opposite to seeResponseContainsJson</token>
  </line>
  <line no="942">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="943">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="944">
    <token name="T_DOC_COMMENT">     * @param array $json</token>
  </line>
  <line no="945">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="946">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeResponseContainsJson()</token>
  </line>
  <line no="947">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="948">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">cantSeeResponseContainsJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$json</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="949">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeResponseContainsJson'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="950">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="951">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="952">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="953">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="954">
    <token name="T_DOC_COMMENT">     * Opposite to seeResponseContainsJson</token>
  </line>
  <line no="955">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="956">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="957">
    <token name="T_DOC_COMMENT">     * @param array $json</token>
  </line>
  <line no="958">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeResponseContainsJson()</token>
  </line>
  <line no="959">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="960">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">dontSeeResponseContainsJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$json</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="961">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeResponseContainsJson'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="962">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="963"/>
  <line no="964">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="965">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="966">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="967">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="968">
    <token name="T_DOC_COMMENT">     * Checks that Json matches provided types.</token>
  </line>
  <line no="969">
    <token name="T_DOC_COMMENT">     * In case you don't know the actual values of JSON data returned you can match them by type.</token>
  </line>
  <line no="970">
    <token name="T_DOC_COMMENT">     * Starts check with a root element. If JSON data is array it will check the first element of an array.</token>
  </line>
  <line no="971">
    <token name="T_DOC_COMMENT">     * You can specify the path in the json which should be checked with JsonPath</token>
  </line>
  <line no="972">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="973">
    <token name="T_DOC_COMMENT">     * Basic example:</token>
  </line>
  <line no="974">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="975">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="976">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="977">
    <token name="T_DOC_COMMENT">     * // {'user_id': 1, 'name': 'davert', 'is_active': false}</token>
  </line>
  <line no="978">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseMatchesJsonType([</token>
  </line>
  <line no="979">
    <token name="T_DOC_COMMENT">     *      'user_id' =&gt; 'integer',</token>
  </line>
  <line no="980">
    <token name="T_DOC_COMMENT">     *      'name' =&gt; 'string|null',</token>
  </line>
  <line no="981">
    <token name="T_DOC_COMMENT">     *      'is_active' =&gt; 'boolean'</token>
  </line>
  <line no="982">
    <token name="T_DOC_COMMENT">     * ]);</token>
  </line>
  <line no="983">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="984">
    <token name="T_DOC_COMMENT">     * // narrow down matching with JsonPath:</token>
  </line>
  <line no="985">
    <token name="T_DOC_COMMENT">     * // {"users": [{ "name": "davert"}, {"id": 1}]}</token>
  </line>
  <line no="986">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseMatchesJsonType(['name' =&gt; 'string'], '$.users[0]');</token>
  </line>
  <line no="987">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="988">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="989">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="990">
    <token name="T_DOC_COMMENT">     * In this case you can match that record contains fields with data types you expected.</token>
  </line>
  <line no="991">
    <token name="T_DOC_COMMENT">     * The list of possible data types:</token>
  </line>
  <line no="992">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="993">
    <token name="T_DOC_COMMENT">     * * string</token>
  </line>
  <line no="994">
    <token name="T_DOC_COMMENT">     * * integer</token>
  </line>
  <line no="995">
    <token name="T_DOC_COMMENT">     * * float</token>
  </line>
  <line no="996">
    <token name="T_DOC_COMMENT">     * * array (json object is array as well)</token>
  </line>
  <line no="997">
    <token name="T_DOC_COMMENT">     * * boolean</token>
  </line>
  <line no="998">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="999">
    <token name="T_DOC_COMMENT">     * You can also use nested data type structures:</token>
  </line>
  <line no="1000">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1001">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1002">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1003">
    <token name="T_DOC_COMMENT">     * // {'user_id': 1, 'name': 'davert', 'company': {'name': 'Codegyre'}}</token>
  </line>
  <line no="1004">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseMatchesJsonType([</token>
  </line>
  <line no="1005">
    <token name="T_DOC_COMMENT">     *      'user_id' =&gt; 'integer|string', // multiple types</token>
  </line>
  <line no="1006">
    <token name="T_DOC_COMMENT">     *      'company' =&gt; ['name' =&gt; 'string']</token>
  </line>
  <line no="1007">
    <token name="T_DOC_COMMENT">     * ]);</token>
  </line>
  <line no="1008">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1009">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1010">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1011">
    <token name="T_DOC_COMMENT">     * You can also apply filters to check values. Filter can be applied with `:` char after the type declaration.</token>
  </line>
  <line no="1012">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1013">
    <token name="T_DOC_COMMENT">     * Here is the list of possible filters:</token>
  </line>
  <line no="1014">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1015">
    <token name="T_DOC_COMMENT">     * * `integer:&gt;{val}` - checks that integer is greater than {val} (works with float and string types too).</token>
  </line>
  <line no="1016">
    <token name="T_DOC_COMMENT">     * * `integer:&lt;{val}` - checks that integer is lower than {val} (works with float and string types too).</token>
  </line>
  <line no="1017">
    <token name="T_DOC_COMMENT">     * * `string:url` - checks that value is valid url.</token>
  </line>
  <line no="1018">
    <token name="T_DOC_COMMENT">     * * `string:date` - checks that value is date in JavaScript format: https://weblog.west-wind.com/posts/2014/Jan/06/JavaScript-JSON-Date-Parsing-and-real-Dates</token>
  </line>
  <line no="1019">
    <token name="T_DOC_COMMENT">     * * `string:email` - checks that value is a valid email according to http://emailregex.com/</token>
  </line>
  <line no="1020">
    <token name="T_DOC_COMMENT">     * * `string:regex({val})` - checks that string matches a regex provided with {val}</token>
  </line>
  <line no="1021">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1022">
    <token name="T_DOC_COMMENT">     * This is how filters can be used:</token>
  </line>
  <line no="1023">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1024">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1025">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1026">
    <token name="T_DOC_COMMENT">     * // {'user_id': 1, 'email' =&gt; 'davert@codeception.com'}</token>
  </line>
  <line no="1027">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseMatchesJsonType([</token>
  </line>
  <line no="1028">
    <token name="T_DOC_COMMENT">     *      'user_id' =&gt; 'string:&gt;0:&lt;1000', // multiple filters can be used</token>
  </line>
  <line no="1029">
    <token name="T_DOC_COMMENT">     *      'email' =&gt; 'string:regex(~\@~)' // we just check that @ char is included</token>
  </line>
  <line no="1030">
    <token name="T_DOC_COMMENT">     * ]);</token>
  </line>
  <line no="1031">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1032">
    <token name="T_DOC_COMMENT">     * // {'user_id': '1'}</token>
  </line>
  <line no="1033">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseMatchesJsonType([</token>
  </line>
  <line no="1034">
    <token name="T_DOC_COMMENT">     *      'user_id' =&gt; 'string:&gt;0', // works with strings as well</token>
  </line>
  <line no="1035">
    <token name="T_DOC_COMMENT">     * }</token>
  </line>
  <line no="1036">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1037">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1038">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1039">
    <token name="T_DOC_COMMENT">     * You can also add custom filters y accessing `JsonType::addCustomFilter` method.</token>
  </line>
  <line no="1040">
    <token name="T_DOC_COMMENT">     * See [JsonType reference](http://codeception.com/docs/reference/JsonType).</token>
  </line>
  <line no="1041">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1042">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1043">
    <token name="T_DOC_COMMENT">     * @version 2.1.3</token>
  </line>
  <line no="1044">
    <token name="T_DOC_COMMENT">     * @param array $jsonType</token>
  </line>
  <line no="1045">
    <token name="T_DOC_COMMENT">     * @param string $jsonPath</token>
  </line>
  <line no="1046">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1047">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseMatchesJsonType()</token>
  </line>
  <line no="1048">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1049">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeResponseMatchesJsonType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$jsonType</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$jsonPath</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1050">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseMatchesJsonType'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1051">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1052">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1053">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1054">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1055">
    <token name="T_DOC_COMMENT">     * Checks that Json matches provided types.</token>
  </line>
  <line no="1056">
    <token name="T_DOC_COMMENT">     * In case you don't know the actual values of JSON data returned you can match them by type.</token>
  </line>
  <line no="1057">
    <token name="T_DOC_COMMENT">     * Starts check with a root element. If JSON data is array it will check the first element of an array.</token>
  </line>
  <line no="1058">
    <token name="T_DOC_COMMENT">     * You can specify the path in the json which should be checked with JsonPath</token>
  </line>
  <line no="1059">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1060">
    <token name="T_DOC_COMMENT">     * Basic example:</token>
  </line>
  <line no="1061">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1062">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1063">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1064">
    <token name="T_DOC_COMMENT">     * // {'user_id': 1, 'name': 'davert', 'is_active': false}</token>
  </line>
  <line no="1065">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseMatchesJsonType([</token>
  </line>
  <line no="1066">
    <token name="T_DOC_COMMENT">     *      'user_id' =&gt; 'integer',</token>
  </line>
  <line no="1067">
    <token name="T_DOC_COMMENT">     *      'name' =&gt; 'string|null',</token>
  </line>
  <line no="1068">
    <token name="T_DOC_COMMENT">     *      'is_active' =&gt; 'boolean'</token>
  </line>
  <line no="1069">
    <token name="T_DOC_COMMENT">     * ]);</token>
  </line>
  <line no="1070">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1071">
    <token name="T_DOC_COMMENT">     * // narrow down matching with JsonPath:</token>
  </line>
  <line no="1072">
    <token name="T_DOC_COMMENT">     * // {"users": [{ "name": "davert"}, {"id": 1}]}</token>
  </line>
  <line no="1073">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseMatchesJsonType(['name' =&gt; 'string'], '$.users[0]');</token>
  </line>
  <line no="1074">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1075">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1076">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1077">
    <token name="T_DOC_COMMENT">     * In this case you can match that record contains fields with data types you expected.</token>
  </line>
  <line no="1078">
    <token name="T_DOC_COMMENT">     * The list of possible data types:</token>
  </line>
  <line no="1079">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1080">
    <token name="T_DOC_COMMENT">     * * string</token>
  </line>
  <line no="1081">
    <token name="T_DOC_COMMENT">     * * integer</token>
  </line>
  <line no="1082">
    <token name="T_DOC_COMMENT">     * * float</token>
  </line>
  <line no="1083">
    <token name="T_DOC_COMMENT">     * * array (json object is array as well)</token>
  </line>
  <line no="1084">
    <token name="T_DOC_COMMENT">     * * boolean</token>
  </line>
  <line no="1085">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1086">
    <token name="T_DOC_COMMENT">     * You can also use nested data type structures:</token>
  </line>
  <line no="1087">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1088">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1089">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1090">
    <token name="T_DOC_COMMENT">     * // {'user_id': 1, 'name': 'davert', 'company': {'name': 'Codegyre'}}</token>
  </line>
  <line no="1091">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseMatchesJsonType([</token>
  </line>
  <line no="1092">
    <token name="T_DOC_COMMENT">     *      'user_id' =&gt; 'integer|string', // multiple types</token>
  </line>
  <line no="1093">
    <token name="T_DOC_COMMENT">     *      'company' =&gt; ['name' =&gt; 'string']</token>
  </line>
  <line no="1094">
    <token name="T_DOC_COMMENT">     * ]);</token>
  </line>
  <line no="1095">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1096">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1097">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1098">
    <token name="T_DOC_COMMENT">     * You can also apply filters to check values. Filter can be applied with `:` char after the type declaration.</token>
  </line>
  <line no="1099">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1100">
    <token name="T_DOC_COMMENT">     * Here is the list of possible filters:</token>
  </line>
  <line no="1101">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1102">
    <token name="T_DOC_COMMENT">     * * `integer:&gt;{val}` - checks that integer is greater than {val} (works with float and string types too).</token>
  </line>
  <line no="1103">
    <token name="T_DOC_COMMENT">     * * `integer:&lt;{val}` - checks that integer is lower than {val} (works with float and string types too).</token>
  </line>
  <line no="1104">
    <token name="T_DOC_COMMENT">     * * `string:url` - checks that value is valid url.</token>
  </line>
  <line no="1105">
    <token name="T_DOC_COMMENT">     * * `string:date` - checks that value is date in JavaScript format: https://weblog.west-wind.com/posts/2014/Jan/06/JavaScript-JSON-Date-Parsing-and-real-Dates</token>
  </line>
  <line no="1106">
    <token name="T_DOC_COMMENT">     * * `string:email` - checks that value is a valid email according to http://emailregex.com/</token>
  </line>
  <line no="1107">
    <token name="T_DOC_COMMENT">     * * `string:regex({val})` - checks that string matches a regex provided with {val}</token>
  </line>
  <line no="1108">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1109">
    <token name="T_DOC_COMMENT">     * This is how filters can be used:</token>
  </line>
  <line no="1110">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1111">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1112">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1113">
    <token name="T_DOC_COMMENT">     * // {'user_id': 1, 'email' =&gt; 'davert@codeception.com'}</token>
  </line>
  <line no="1114">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseMatchesJsonType([</token>
  </line>
  <line no="1115">
    <token name="T_DOC_COMMENT">     *      'user_id' =&gt; 'string:&gt;0:&lt;1000', // multiple filters can be used</token>
  </line>
  <line no="1116">
    <token name="T_DOC_COMMENT">     *      'email' =&gt; 'string:regex(~\@~)' // we just check that @ char is included</token>
  </line>
  <line no="1117">
    <token name="T_DOC_COMMENT">     * ]);</token>
  </line>
  <line no="1118">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1119">
    <token name="T_DOC_COMMENT">     * // {'user_id': '1'}</token>
  </line>
  <line no="1120">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseMatchesJsonType([</token>
  </line>
  <line no="1121">
    <token name="T_DOC_COMMENT">     *      'user_id' =&gt; 'string:&gt;0', // works with strings as well</token>
  </line>
  <line no="1122">
    <token name="T_DOC_COMMENT">     * }</token>
  </line>
  <line no="1123">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1124">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1125">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1126">
    <token name="T_DOC_COMMENT">     * You can also add custom filters y accessing `JsonType::addCustomFilter` method.</token>
  </line>
  <line no="1127">
    <token name="T_DOC_COMMENT">     * See [JsonType reference](http://codeception.com/docs/reference/JsonType).</token>
  </line>
  <line no="1128">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1129">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1130">
    <token name="T_DOC_COMMENT">     * @version 2.1.3</token>
  </line>
  <line no="1131">
    <token name="T_DOC_COMMENT">     * @param array $jsonType</token>
  </line>
  <line no="1132">
    <token name="T_DOC_COMMENT">     * @param string $jsonPath</token>
  </line>
  <line no="1133">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseMatchesJsonType()</token>
  </line>
  <line no="1134">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1135">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeResponseMatchesJsonType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$jsonType</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$jsonPath</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1136">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseMatchesJsonType'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1137">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1138"/>
  <line no="1139">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1140">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1141">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1142">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1143">
    <token name="T_DOC_COMMENT">     * Opposite to `seeResponseMatchesJsonType`.</token>
  </line>
  <line no="1144">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1145">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1146">
    <token name="T_DOC_COMMENT">     * @see seeResponseMatchesJsonType</token>
  </line>
  <line no="1147">
    <token name="T_DOC_COMMENT">     * @param $jsonType jsonType structure</token>
  </line>
  <line no="1148">
    <token name="T_DOC_COMMENT">     * @param null $jsonPath optionally set specific path to structure with JsonPath</token>
  </line>
  <line no="1149">
    <token name="T_DOC_COMMENT">     * @version 2.1.3</token>
  </line>
  <line no="1150">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1151">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeResponseMatchesJsonType()</token>
  </line>
  <line no="1152">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1153">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">cantSeeResponseMatchesJsonType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$jsonType</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$jsonPath</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1154">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeResponseMatchesJsonType'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1155">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1156">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1157">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1158">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1159">
    <token name="T_DOC_COMMENT">     * Opposite to `seeResponseMatchesJsonType`.</token>
  </line>
  <line no="1160">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1161">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1162">
    <token name="T_DOC_COMMENT">     * @see seeResponseMatchesJsonType</token>
  </line>
  <line no="1163">
    <token name="T_DOC_COMMENT">     * @param $jsonType jsonType structure</token>
  </line>
  <line no="1164">
    <token name="T_DOC_COMMENT">     * @param null $jsonPath optionally set specific path to structure with JsonPath</token>
  </line>
  <line no="1165">
    <token name="T_DOC_COMMENT">     * @version 2.1.3</token>
  </line>
  <line no="1166">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeResponseMatchesJsonType()</token>
  </line>
  <line no="1167">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1168">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">dontSeeResponseMatchesJsonType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$jsonType</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$jsonPath</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1169">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeResponseMatchesJsonType'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1170">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1171"/>
  <line no="1172">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1173">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1174">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1175">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1176">
    <token name="T_DOC_COMMENT">     * Checks if response is exactly the same as provided.</token>
  </line>
  <line no="1177">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1178">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1179">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1180">
    <token name="T_DOC_COMMENT">     * @param $response</token>
  </line>
  <line no="1181">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1182">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseEquals()</token>
  </line>
  <line no="1183">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1184">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeResponseEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1185">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1186">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1187">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1188">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1189">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1190">
    <token name="T_DOC_COMMENT">     * Checks if response is exactly the same as provided.</token>
  </line>
  <line no="1191">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1192">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1193">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1194">
    <token name="T_DOC_COMMENT">     * @param $response</token>
  </line>
  <line no="1195">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseEquals()</token>
  </line>
  <line no="1196">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1197">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeResponseEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1198">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1199">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1200"/>
  <line no="1201">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1202">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1203">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1204">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1205">
    <token name="T_DOC_COMMENT">     * Checks response code equals to provided value.</token>
  </line>
  <line no="1206">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1207">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1208">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1209">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseCodeIs(200);</token>
  </line>
  <line no="1210">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1211">
    <token name="T_DOC_COMMENT">     * // preferred to use \Codeception\Util\HttpCode</token>
  </line>
  <line no="1212">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseCodeIs(\Codeception\Util\HttpCode::OK);</token>
  </line>
  <line no="1213">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1214">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1215">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1216">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1217">
    <token name="T_DOC_COMMENT">     * @param $code</token>
  </line>
  <line no="1218">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1219">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseCodeIs()</token>
  </line>
  <line no="1220">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1221">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeResponseCodeIs</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1222">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseCodeIs'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1223">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1224">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1225">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1226">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1227">
    <token name="T_DOC_COMMENT">     * Checks response code equals to provided value.</token>
  </line>
  <line no="1228">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1229">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1230">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1231">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseCodeIs(200);</token>
  </line>
  <line no="1232">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1233">
    <token name="T_DOC_COMMENT">     * // preferred to use \Codeception\Util\HttpCode</token>
  </line>
  <line no="1234">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeResponseCodeIs(\Codeception\Util\HttpCode::OK);</token>
  </line>
  <line no="1235">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1236">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1237">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1238">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1239">
    <token name="T_DOC_COMMENT">     * @param $code</token>
  </line>
  <line no="1240">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseCodeIs()</token>
  </line>
  <line no="1241">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1242">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeResponseCodeIs</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1243">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseCodeIs'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1244">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1245"/>
  <line no="1246">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1247">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1248">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1249">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1250">
    <token name="T_DOC_COMMENT">     * Checks that response code is not equal to provided value.</token>
  </line>
  <line no="1251">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1252">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1253">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1254">
    <token name="T_DOC_COMMENT">     * $I-&gt;dontSeeResponseCodeIs(200);</token>
  </line>
  <line no="1255">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1256">
    <token name="T_DOC_COMMENT">     * // preferred to use \Codeception\Util\HttpCode</token>
  </line>
  <line no="1257">
    <token name="T_DOC_COMMENT">     * $I-&gt;dontSeeResponseCodeIs(\Codeception\Util\HttpCode::OK);</token>
  </line>
  <line no="1258">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1259">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1260">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1261">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1262">
    <token name="T_DOC_COMMENT">     * @param $code</token>
  </line>
  <line no="1263">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1264">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeResponseCodeIs()</token>
  </line>
  <line no="1265">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1266">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">cantSeeResponseCodeIs</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1267">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeResponseCodeIs'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1268">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1269">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1270">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1271">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1272">
    <token name="T_DOC_COMMENT">     * Checks that response code is not equal to provided value.</token>
  </line>
  <line no="1273">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1274">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1275">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1276">
    <token name="T_DOC_COMMENT">     * $I-&gt;dontSeeResponseCodeIs(200);</token>
  </line>
  <line no="1277">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1278">
    <token name="T_DOC_COMMENT">     * // preferred to use \Codeception\Util\HttpCode</token>
  </line>
  <line no="1279">
    <token name="T_DOC_COMMENT">     * $I-&gt;dontSeeResponseCodeIs(\Codeception\Util\HttpCode::OK);</token>
  </line>
  <line no="1280">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1281">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1282">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1283">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1284">
    <token name="T_DOC_COMMENT">     * @param $code</token>
  </line>
  <line no="1285">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeResponseCodeIs()</token>
  </line>
  <line no="1286">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1287">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">dontSeeResponseCodeIs</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1288">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeResponseCodeIs'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1289">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1290"/>
  <line no="1291">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1292">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1293">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1294">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1295">
    <token name="T_DOC_COMMENT">     * Checks whether last response was valid XML.</token>
  </line>
  <line no="1296">
    <token name="T_DOC_COMMENT">     * This is done with libxml_get_last_error function.</token>
  </line>
  <line no="1297">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1298">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1299">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1300">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseIsXml()</token>
  </line>
  <line no="1301">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1302">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeResponseIsXml</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1303">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseIsXml'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1304">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1305">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1306">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1307">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1308">
    <token name="T_DOC_COMMENT">     * Checks whether last response was valid XML.</token>
  </line>
  <line no="1309">
    <token name="T_DOC_COMMENT">     * This is done with libxml_get_last_error function.</token>
  </line>
  <line no="1310">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1311">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1312">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeResponseIsXml()</token>
  </line>
  <line no="1313">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1314">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeResponseIsXml</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1315">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeResponseIsXml'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1316">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1317"/>
  <line no="1318">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1319">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1320">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1321">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1322">
    <token name="T_DOC_COMMENT">     * Checks whether XML response matches XPath</token>
  </line>
  <line no="1323">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1324">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1325">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1326">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeXmlResponseMatchesXpath('//root/user[@id=1]');</token>
  </line>
  <line no="1327">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1328">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1329">
    <token name="T_DOC_COMMENT">     * @param $xpath</token>
  </line>
  <line no="1330">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1331">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeXmlResponseMatchesXpath()</token>
  </line>
  <line no="1332">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1333">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeXmlResponseMatchesXpath</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xpath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1334">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeXmlResponseMatchesXpath'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1335">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1336">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1337">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1338">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1339">
    <token name="T_DOC_COMMENT">     * Checks whether XML response matches XPath</token>
  </line>
  <line no="1340">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1341">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1342">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1343">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeXmlResponseMatchesXpath('//root/user[@id=1]');</token>
  </line>
  <line no="1344">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1345">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1346">
    <token name="T_DOC_COMMENT">     * @param $xpath</token>
  </line>
  <line no="1347">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeXmlResponseMatchesXpath()</token>
  </line>
  <line no="1348">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1349">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeXmlResponseMatchesXpath</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xpath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1350">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeXmlResponseMatchesXpath'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1351">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1352"/>
  <line no="1353">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1354">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1355">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1356">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1357">
    <token name="T_DOC_COMMENT">     * Checks whether XML response does not match XPath</token>
  </line>
  <line no="1358">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1359">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1360">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1361">
    <token name="T_DOC_COMMENT">     * $I-&gt;dontSeeXmlResponseMatchesXpath('//root/user[@id=1]');</token>
  </line>
  <line no="1362">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1363">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1364">
    <token name="T_DOC_COMMENT">     * @param $xpath</token>
  </line>
  <line no="1365">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1366">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeXmlResponseMatchesXpath()</token>
  </line>
  <line no="1367">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1368">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">cantSeeXmlResponseMatchesXpath</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xpath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1369">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeXmlResponseMatchesXpath'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1370">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1371">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1372">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1373">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1374">
    <token name="T_DOC_COMMENT">     * Checks whether XML response does not match XPath</token>
  </line>
  <line no="1375">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1376">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1377">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1378">
    <token name="T_DOC_COMMENT">     * $I-&gt;dontSeeXmlResponseMatchesXpath('//root/user[@id=1]');</token>
  </line>
  <line no="1379">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1380">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1381">
    <token name="T_DOC_COMMENT">     * @param $xpath</token>
  </line>
  <line no="1382">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeXmlResponseMatchesXpath()</token>
  </line>
  <line no="1383">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1384">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">dontSeeXmlResponseMatchesXpath</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xpath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1385">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeXmlResponseMatchesXpath'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1386">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1387"/>
  <line no="1388">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1389">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1390">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1391">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1392">
    <token name="T_DOC_COMMENT">     * Finds and returns text contents of element.</token>
  </line>
  <line no="1393">
    <token name="T_DOC_COMMENT">     * Element is matched by either CSS or XPath</token>
  </line>
  <line no="1394">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1395">
    <token name="T_DOC_COMMENT">     * @param $cssOrXPath</token>
  </line>
  <line no="1396">
    <token name="T_DOC_COMMENT">     * @return string</token>
  </line>
  <line no="1397">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1398">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::grabTextContentFromXmlElement()</token>
  </line>
  <line no="1399">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1400">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">grabTextContentFromXmlElement</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$cssOrXPath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1401">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'grabTextContentFromXmlElement'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1402">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1403"/>
  <line no="1404">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1405">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1406">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1407">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1408">
    <token name="T_DOC_COMMENT">     * Finds and returns attribute of element.</token>
  </line>
  <line no="1409">
    <token name="T_DOC_COMMENT">     * Element is matched by either CSS or XPath</token>
  </line>
  <line no="1410">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1411">
    <token name="T_DOC_COMMENT">     * @param $cssOrXPath</token>
  </line>
  <line no="1412">
    <token name="T_DOC_COMMENT">     * @param $attribute</token>
  </line>
  <line no="1413">
    <token name="T_DOC_COMMENT">     * @return string</token>
  </line>
  <line no="1414">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1415">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::grabAttributeFromXmlElement()</token>
  </line>
  <line no="1416">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1417">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">grabAttributeFromXmlElement</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$cssOrXPath</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1418">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'grabAttributeFromXmlElement'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1419">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1420"/>
  <line no="1421">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1422">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1423">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1424">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1425">
    <token name="T_DOC_COMMENT">     * Checks XML response equals provided XML.</token>
  </line>
  <line no="1426">
    <token name="T_DOC_COMMENT">     * Comparison is done by canonicalizing both xml`s.</token>
  </line>
  <line no="1427">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1428">
    <token name="T_DOC_COMMENT">     * Parameters can be passed either as DOMDocument, DOMNode, XML string, or array (if no attributes).</token>
  </line>
  <line no="1429">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1430">
    <token name="T_DOC_COMMENT">     * @param $xml</token>
  </line>
  <line no="1431">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1432">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1433">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeXmlResponseEquals()</token>
  </line>
  <line no="1434">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1435">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeXmlResponseEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1436">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeXmlResponseEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1437">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1438">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1439">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1440">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1441">
    <token name="T_DOC_COMMENT">     * Checks XML response equals provided XML.</token>
  </line>
  <line no="1442">
    <token name="T_DOC_COMMENT">     * Comparison is done by canonicalizing both xml`s.</token>
  </line>
  <line no="1443">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1444">
    <token name="T_DOC_COMMENT">     * Parameters can be passed either as DOMDocument, DOMNode, XML string, or array (if no attributes).</token>
  </line>
  <line no="1445">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1446">
    <token name="T_DOC_COMMENT">     * @param $xml</token>
  </line>
  <line no="1447">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1448">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeXmlResponseEquals()</token>
  </line>
  <line no="1449">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1450">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeXmlResponseEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1451">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeXmlResponseEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1452">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1453"/>
  <line no="1454">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1455">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1456">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1457">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1458">
    <token name="T_DOC_COMMENT">     * Checks XML response does not equal to provided XML.</token>
  </line>
  <line no="1459">
    <token name="T_DOC_COMMENT">     * Comparison is done by canonicalizing both xml`s.</token>
  </line>
  <line no="1460">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1461">
    <token name="T_DOC_COMMENT">     * Parameter can be passed either as XmlBuilder, DOMDocument, DOMNode, XML string, or array (if no attributes).</token>
  </line>
  <line no="1462">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1463">
    <token name="T_DOC_COMMENT">     * @param $xml</token>
  </line>
  <line no="1464">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1465">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1466">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeXmlResponseEquals()</token>
  </line>
  <line no="1467">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1468">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">cantSeeXmlResponseEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1469">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeXmlResponseEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1470">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1471">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1472">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1473">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1474">
    <token name="T_DOC_COMMENT">     * Checks XML response does not equal to provided XML.</token>
  </line>
  <line no="1475">
    <token name="T_DOC_COMMENT">     * Comparison is done by canonicalizing both xml`s.</token>
  </line>
  <line no="1476">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1477">
    <token name="T_DOC_COMMENT">     * Parameter can be passed either as XmlBuilder, DOMDocument, DOMNode, XML string, or array (if no attributes).</token>
  </line>
  <line no="1478">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1479">
    <token name="T_DOC_COMMENT">     * @param $xml</token>
  </line>
  <line no="1480">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1481">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeXmlResponseEquals()</token>
  </line>
  <line no="1482">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1483">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">dontSeeXmlResponseEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1484">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeXmlResponseEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1485">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1486"/>
  <line no="1487">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1488">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1489">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1490">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1491">
    <token name="T_DOC_COMMENT">     * Checks XML response includes provided XML.</token>
  </line>
  <line no="1492">
    <token name="T_DOC_COMMENT">     * Comparison is done by canonicalizing both xml`s.</token>
  </line>
  <line no="1493">
    <token name="T_DOC_COMMENT">     * Parameter can be passed either as XmlBuilder, DOMDocument, DOMNode, XML string, or array (if no attributes).</token>
  </line>
  <line no="1494">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1495">
    <token name="T_DOC_COMMENT">     * Example:</token>
  </line>
  <line no="1496">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1497">
    <token name="T_DOC_COMMENT">     * ``` php</token>
  </line>
  <line no="1498">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1499">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeXmlResponseIncludes("&lt;result&gt;1&lt;/result&gt;");</token>
  </line>
  <line no="1500">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1501">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1502">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1503">
    <token name="T_DOC_COMMENT">     * @param $xml</token>
  </line>
  <line no="1504">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1505">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1506">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeXmlResponseIncludes()</token>
  </line>
  <line no="1507">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1508">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeXmlResponseIncludes</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1509">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeXmlResponseIncludes'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1510">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1511">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1512">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1513">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1514">
    <token name="T_DOC_COMMENT">     * Checks XML response includes provided XML.</token>
  </line>
  <line no="1515">
    <token name="T_DOC_COMMENT">     * Comparison is done by canonicalizing both xml`s.</token>
  </line>
  <line no="1516">
    <token name="T_DOC_COMMENT">     * Parameter can be passed either as XmlBuilder, DOMDocument, DOMNode, XML string, or array (if no attributes).</token>
  </line>
  <line no="1517">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1518">
    <token name="T_DOC_COMMENT">     * Example:</token>
  </line>
  <line no="1519">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1520">
    <token name="T_DOC_COMMENT">     * ``` php</token>
  </line>
  <line no="1521">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1522">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeXmlResponseIncludes("&lt;result&gt;1&lt;/result&gt;");</token>
  </line>
  <line no="1523">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1524">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1525">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1526">
    <token name="T_DOC_COMMENT">     * @param $xml</token>
  </line>
  <line no="1527">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1528">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeXmlResponseIncludes()</token>
  </line>
  <line no="1529">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1530">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeXmlResponseIncludes</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1531">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeXmlResponseIncludes'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1532">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1533"/>
  <line no="1534">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1535">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1536">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1537">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1538">
    <token name="T_DOC_COMMENT">     * Checks XML response does not include provided XML.</token>
  </line>
  <line no="1539">
    <token name="T_DOC_COMMENT">     * Comparison is done by canonicalizing both xml`s.</token>
  </line>
  <line no="1540">
    <token name="T_DOC_COMMENT">     * Parameter can be passed either as XmlBuilder, DOMDocument, DOMNode, XML string, or array (if no attributes).</token>
  </line>
  <line no="1541">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1542">
    <token name="T_DOC_COMMENT">     * @param $xml</token>
  </line>
  <line no="1543">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1544">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1545">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeXmlResponseIncludes()</token>
  </line>
  <line no="1546">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1547">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">cantSeeXmlResponseIncludes</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1548">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeXmlResponseIncludes'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1549">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1550">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1551">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1552">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1553">
    <token name="T_DOC_COMMENT">     * Checks XML response does not include provided XML.</token>
  </line>
  <line no="1554">
    <token name="T_DOC_COMMENT">     * Comparison is done by canonicalizing both xml`s.</token>
  </line>
  <line no="1555">
    <token name="T_DOC_COMMENT">     * Parameter can be passed either as XmlBuilder, DOMDocument, DOMNode, XML string, or array (if no attributes).</token>
  </line>
  <line no="1556">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1557">
    <token name="T_DOC_COMMENT">     * @param $xml</token>
  </line>
  <line no="1558">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1559">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeXmlResponseIncludes()</token>
  </line>
  <line no="1560">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1561">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">dontSeeXmlResponseIncludes</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$xml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1562">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeXmlResponseIncludes'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1563">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1564"/>
  <line no="1565">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1566">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1567">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1568">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1569">
    <token name="T_DOC_COMMENT">     * Checks if the hash of a binary response is exactly the same as provided.</token>
  </line>
  <line no="1570">
    <token name="T_DOC_COMMENT">     * Parameter can be passed as any hash string supported by hash(), with an</token>
  </line>
  <line no="1571">
    <token name="T_DOC_COMMENT">     * optional second parameter to specify the hash type, which defaults to md5.</token>
  </line>
  <line no="1572">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1573">
    <token name="T_DOC_COMMENT">     * Example: Using md5 hash key</token>
  </line>
  <line no="1574">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1575">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1576">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1577">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeBinaryResponseEquals("8c90748342f19b195b9c6b4eff742ded");</token>
  </line>
  <line no="1578">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1579">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1580">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1581">
    <token name="T_DOC_COMMENT">     * Example: Using md5 for a file contents</token>
  </line>
  <line no="1582">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1583">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1584">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1585">
    <token name="T_DOC_COMMENT">     * $fileData = file_get_contents("test_file.jpg");</token>
  </line>
  <line no="1586">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeBinaryResponseEquals(md5($fileData));</token>
  </line>
  <line no="1587">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1588">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1589">
    <token name="T_DOC_COMMENT">     * Example: Using sha256 hash</token>
  </line>
  <line no="1590">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1591">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1592">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1593">
    <token name="T_DOC_COMMENT">     * $fileData = '/9j/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/yQALCAABAAEBAREA/8wABgAQEAX/2gAIAQEAAD8A0s8g/9k='; // very small jpeg</token>
  </line>
  <line no="1594">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeBinaryResponseEquals(hash("sha256", base64_decode($fileData)), 'sha256');</token>
  </line>
  <line no="1595">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1596">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1597">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1598">
    <token name="T_DOC_COMMENT">     * @param $hash the hashed data response expected</token>
  </line>
  <line no="1599">
    <token name="T_DOC_COMMENT">     * @param $algo the hash algorithm to use. Default md5.</token>
  </line>
  <line no="1600">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1601">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1602">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1603">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeBinaryResponseEquals()</token>
  </line>
  <line no="1604">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1605">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">canSeeBinaryResponseEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$hash</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$algo</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1606">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeBinaryResponseEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1607">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1608">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1609">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1610">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1611">
    <token name="T_DOC_COMMENT">     * Checks if the hash of a binary response is exactly the same as provided.</token>
  </line>
  <line no="1612">
    <token name="T_DOC_COMMENT">     * Parameter can be passed as any hash string supported by hash(), with an</token>
  </line>
  <line no="1613">
    <token name="T_DOC_COMMENT">     * optional second parameter to specify the hash type, which defaults to md5.</token>
  </line>
  <line no="1614">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1615">
    <token name="T_DOC_COMMENT">     * Example: Using md5 hash key</token>
  </line>
  <line no="1616">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1617">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1618">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1619">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeBinaryResponseEquals("8c90748342f19b195b9c6b4eff742ded");</token>
  </line>
  <line no="1620">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1621">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1622">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1623">
    <token name="T_DOC_COMMENT">     * Example: Using md5 for a file contents</token>
  </line>
  <line no="1624">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1625">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1626">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1627">
    <token name="T_DOC_COMMENT">     * $fileData = file_get_contents("test_file.jpg");</token>
  </line>
  <line no="1628">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeBinaryResponseEquals(md5($fileData));</token>
  </line>
  <line no="1629">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1630">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1631">
    <token name="T_DOC_COMMENT">     * Example: Using sha256 hash</token>
  </line>
  <line no="1632">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1633">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1634">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1635">
    <token name="T_DOC_COMMENT">     * $fileData = '/9j/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/yQALCAABAAEBAREA/8wABgAQEAX/2gAIAQEAAD8A0s8g/9k='; // very small jpeg</token>
  </line>
  <line no="1636">
    <token name="T_DOC_COMMENT">     * $I-&gt;seeBinaryResponseEquals(hash("sha256", base64_decode($fileData)), 'sha256');</token>
  </line>
  <line no="1637">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1638">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1639">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1640">
    <token name="T_DOC_COMMENT">     * @param $hash the hashed data response expected</token>
  </line>
  <line no="1641">
    <token name="T_DOC_COMMENT">     * @param $algo the hash algorithm to use. Default md5.</token>
  </line>
  <line no="1642">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1643">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1644">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::seeBinaryResponseEquals()</token>
  </line>
  <line no="1645">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1646">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">seeBinaryResponseEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$hash</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$algo</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1647">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'seeBinaryResponseEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1648">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1649"/>
  <line no="1650">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1651">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1652">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1653">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1654">
    <token name="T_DOC_COMMENT">     * Checks if the hash of a binary response is not the same as provided.</token>
  </line>
  <line no="1655">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1656">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1657">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1658">
    <token name="T_DOC_COMMENT">     * $I-&gt;dontSeeBinaryResponseEquals("8c90748342f19b195b9c6b4eff742ded");</token>
  </line>
  <line no="1659">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1660">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1661">
    <token name="T_DOC_COMMENT">     * Opposite to `seeBinaryResponseEquals`</token>
  </line>
  <line no="1662">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1663">
    <token name="T_DOC_COMMENT">     * @param $hash the hashed data response expected</token>
  </line>
  <line no="1664">
    <token name="T_DOC_COMMENT">     * @param $algo the hash algorithm to use. Default md5.</token>
  </line>
  <line no="1665">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1666">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1667">
    <token name="T_DOC_COMMENT">     * Conditional Assertion: Test won't be stopped on fail</token>
  </line>
  <line no="1668">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeBinaryResponseEquals()</token>
  </line>
  <line no="1669">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1670">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">cantSeeBinaryResponseEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$hash</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$algo</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1671">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ConditionalAssertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeBinaryResponseEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1672">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1673">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1674">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1675">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1676">
    <token name="T_DOC_COMMENT">     * Checks if the hash of a binary response is not the same as provided.</token>
  </line>
  <line no="1677">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1678">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1679">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1680">
    <token name="T_DOC_COMMENT">     * $I-&gt;dontSeeBinaryResponseEquals("8c90748342f19b195b9c6b4eff742ded");</token>
  </line>
  <line no="1681">
    <token name="T_DOC_COMMENT">     * ?&gt;</token>
  </line>
  <line no="1682">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1683">
    <token name="T_DOC_COMMENT">     * Opposite to `seeBinaryResponseEquals`</token>
  </line>
  <line no="1684">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1685">
    <token name="T_DOC_COMMENT">     * @param $hash the hashed data response expected</token>
  </line>
  <line no="1686">
    <token name="T_DOC_COMMENT">     * @param $algo the hash algorithm to use. Default md5.</token>
  </line>
  <line no="1687">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1688">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1689">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::dontSeeBinaryResponseEquals()</token>
  </line>
  <line no="1690">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1691">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">dontSeeBinaryResponseEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$hash</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$algo</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1692">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Assertion</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'dontSeeBinaryResponseEquals'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1693">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1694"/>
  <line no="1695">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1696">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1697">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1698">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1699">
    <token name="T_DOC_COMMENT">     * Deprecated since 2.0.9 and removed since 2.1.0</token>
  </line>
  <line no="1700">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1701">
    <token name="T_DOC_COMMENT">     * @param $path</token>
  </line>
  <line no="1702">
    <token name="T_DOC_COMMENT">     * @throws ModuleException</token>
  </line>
  <line no="1703">
    <token name="T_DOC_COMMENT">     * @deprecated</token>
  </line>
  <line no="1704">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::grabDataFromJsonResponse()</token>
  </line>
  <line no="1705">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1706">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">grabDataFromJsonResponse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$path</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1707">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'grabDataFromJsonResponse'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1708">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1709"/>
  <line no="1710">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1711">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1712">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1713">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1714">
    <token name="T_DOC_COMMENT">     * Prevents automatic redirects to be followed by the client</token>
  </line>
  <line no="1715">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1716">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1717">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1718">
    <token name="T_DOC_COMMENT">     * $I-&gt;stopFollowingRedirects();</token>
  </line>
  <line no="1719">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1720">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1721">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1722">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1723">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::stopFollowingRedirects()</token>
  </line>
  <line no="1724">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1725">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">stopFollowingRedirects</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1726">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'stopFollowingRedirects'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1727">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1728"/>
  <line no="1729">
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="1730">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1731">
    <token name="T_DOC_COMMENT">     * [!] Method is generated. Documentation taken from corresponding module.</token>
  </line>
  <line no="1732">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1733">
    <token name="T_DOC_COMMENT">     * Enables automatic redirects to be followed by the client</token>
  </line>
  <line no="1734">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1735">
    <token name="T_DOC_COMMENT">     * ```php</token>
  </line>
  <line no="1736">
    <token name="T_DOC_COMMENT">     * &lt;?php</token>
  </line>
  <line no="1737">
    <token name="T_DOC_COMMENT">     * $I-&gt;startFollowingRedirects();</token>
  </line>
  <line no="1738">
    <token name="T_DOC_COMMENT">     * ```</token>
  </line>
  <line no="1739">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1740">
    <token name="T_DOC_COMMENT">     * @part xml</token>
  </line>
  <line no="1741">
    <token name="T_DOC_COMMENT">     * @part json</token>
  </line>
  <line no="1742">
    <token name="T_DOC_COMMENT">     * @see \Codeception\Module\REST::startFollowingRedirects()</token>
  </line>
  <line no="1743">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1744">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">startFollowingRedirects</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1745">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getScenario</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">runStep</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Codeception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Step</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Action</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'startFollowingRedirects'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1746">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1747">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1748"/>
</source>
