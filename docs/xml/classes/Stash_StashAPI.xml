<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Stash\StashAPI" namespace="Stash" name="StashAPI" abstract="false" final="false" start="23" end="1564">
  <file path="L:/Projects/Stash/StashApi-php-Release/docs/../src/Stash" file="STASHAPI.php" realpath="L:/Projects/Stash/StashApi-php-Release/src/Stash/STASHAPI.php" size="69057" time="2019-06-17T23:20:59+00:00" unixtime="1560813659" sha1="a9a543d63ba3d1bf755d7d3cb9c92c7bb24fe7ec" relative="src/Stash/STASHAPI.php"/>
  <constant type="string" name="STASHAPI_VERSION" value="&quot;1.0&quot;"/>
  <constant type="integer" name="STASHAPI_ID_LENGTH" value="32"/>
  <constant type="integer" name="STASHAPI_PW_LENGTH" value="32"/>
  <constant type="integer" name="STASHAPI_SIG_LENGTH" value="32"/>
  <constant type="integer" name="STASHAPI_FILE_BUFFER_SIZE" value="1024"/>
  <constant type="string" name="BASE_VAULT_FOLDER" value="&quot;My Home&quot;"/>
  <constant type="string" name="BASE_URL" value="&quot;https://www.stashbusiness.com/&quot;"/>
  <constant type="string" name="ENC_ALG" value="'aes-256-cbc'"/>
  <member name="api_id" visibility="private" static="false" line="35"/>
  <member name="api_pw" visibility="private" static="false" line="36"/>
  <member name="api_signature" visibility="public" static="false" line="37"/>
  <member name="api_version" visibility="public" static="false" line="38"/>
  <member name="api_timestamp" visibility="private" static="false" line="39"/>
  <member name="verbosity" visibility="private" static="false" line="40"/>
  <member name="url" visibility="public" static="false" line="42"/>
  <member name="params" visibility="public" static="false" line="43"/>
  <member name="BASE_API_URL" visibility="public" static="false" line="45"/>
  <constructor name="__construct" start="55" end="69" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="STASHAPI Constructor"/>
      <param description="the API ID" type="object" variable="$apiId">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </param>
      <param description="the API PW" type="object" variable="$apiPw">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </param>
      <param description="- the base url (e.g. 127.0.0.1, or https://www.stashbusiness.com) if different from the default" type="string" variable="$urlIn"/>
      <param description="verbosity T to generate log messages from STASHAPI functions" type="object">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </param>
    </docblock>
    <parameter name="apiId" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="apiPw" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="urlIn" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="verbosity" byreference="false" type="boolean" default="false"/>
  </constructor>
  <method name="getConstants" start="76" end="80" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the constants in the class"/>
      <throws description="if failed to get constants" type="object">
        <type full="\ReflectionException" namespace="" name="ReflectionException"/>
      </throws>
      <return type="object">
        <type full="Stash\array|NULL" namespace="Stash" name="array|NULL"/>
      </return>
    </docblock>
  </method>
  <method name="__toString" start="87" end="90" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a string representation of this object consisting of the API version"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getVersion" start="97" end="100" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the version for this API"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="isValid" start="108" end="154" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks the parameter and value for sanity and compliance with rules"/>
      <param description="the parameter name =&gt; value" type="array"/>
      <return description="T if all the parameters are deemed valid" type="object">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="dataIn" byreference="false" type="array"/>
  </method>
  <method name="setId" start="163" end="172" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="api_id setter"/>
      <param description="your api_id" type="string"/>
      <throws description="if idIn is invalid or does not match syntax requirements" type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
      <return type="object">
        <type full="Stash\Object/STASHAPI" namespace="Stash" name="Object/STASHAPI"/>
      </return>
    </docblock>
    <parameter name="idIn" byreference="false" type="{unknown}"/>
  </method>
  <method name="getId" start="178" end="181" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="api_id getter"/>
      <return description="the API_ID for this instance" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="setPw" start="189" end="194" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="api_pw setter"/>
      <param description="your api_pw" type="string"/>
      <return type="object">
        <type full="Stash\Object/STASHAPI" namespace="Stash" name="Object/STASHAPI"/>
      </return>
    </docblock>
    <parameter name="pwIn" byreference="false" type="{unknown}"/>
  </method>
  <method name="getPw" start="200" end="203" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="api_pw getter"/>
      <return description="the API_PW for this instance" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="setTimestamp" start="210" end="215" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="api_timestamp setter"/>
      <return type="object">
        <type full="Stash\Object/STASHAPI" namespace="Stash" name="Object/STASHAPI"/>
      </return>
    </docblock>
  </method>
  <method name="getTimestamp" start="221" end="224" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="api_timestamp getter"/>
      <return description="the API_timestamp for this instance" type="object">
        <type full="Stash\Integer" namespace="Stash" name="Integer"/>
      </return>
    </docblock>
  </method>
  <method name="setSignature" start="239" end="254" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="api_signature setter - signs the request with the current data in the STASHAPI request instance">Uses the following parameters as part of the sig calculation (these are all contained in the $dataIn array as key=&gt;value pairs)
- self::params() array containing the request parameters (could be 0 or more key=&gt;value pairs)
- ['url'] contains the URL the request is being sent to
- ['api_version'] contains the version string for this API
- ['api_id'] contains the ID string for the API user
- ['api_timestamp'] contains the epoch / integer timestamp for when the request was created</description>
      <param description="- an array of key/value pairs containing the data to sign" type="array" variable="$dataIn"/>
      <throws description="for invalid inputs" type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
      <return description="T if the function succeeds" type="object">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="dataIn" byreference="false" type="array"/>
  </method>
  <method name="getSignature" start="260" end="263" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="api_signature getter"/>
      <return description="the API_signature for this instance" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="encryptString" start="271" end="291" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function encrypts a string with your API_PW"/>
      <param description="the string to encrypt" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </param>
      <param description="T if the function should return hexbits instead of raw" type="object">
        <type full="Stash\Bool" namespace="Stash" name="Bool"/>
      </param>
      <return description="the encrypted string" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </return>
    </docblock>
    <parameter name="strIn" byreference="false" type="{unknown}"/>
    <parameter name="returnHexBits" byreference="false" type="{unknown}"/>
  </method>
  <method name="decryptString" start="299" end="322" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function decrypts a string with your API_PW"/>
      <param description="the string to decrypt" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </param>
      <param description="T if the input string is hexbits and should be converted back to binary before decryption" type="object">
        <type full="Stash\Bool" namespace="Stash" name="Bool"/>
      </param>
      <return description="the decrypted string" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </return>
    </docblock>
    <parameter name="strIn" byreference="false" type="{unknown}"/>
    <parameter name="inHexBits" byreference="false" type="{unknown}"/>
  </method>
  <method name="sendRequest" start="329" end="372" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function builds and sends an API request"/>
      <throws description="for invalid URLs" type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result from the curl operation" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </return>
    </docblock>
    <inline>
      <comment value="Sign request" line="342"/>
      <comment value="Define the CURL_IGNORE_SSL_ERRORS constant if you want to skip SSL verification (not recommended)" line="359"/>
      <comment value="Return response instead of printing." line="364"/>
      <comment value="Send request." line="366"/>
    </inline>
  </method>
  <method name="sendDownloadRequest" start="382" end="459" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function builds and sends an API download request The result will be stored in a file, specified by $fileNameIn"/>
      <param description="the filename to save the downloaded data to" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </param>
      <return description="the result from the curl operation" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </return>
      <throws description="if $this-&gt;url is invalid" type="object">
        <type full="\UnexpectedValueException" namespace="" name="UnexpectedValueException"/>
      </throws>
    </docblock>
    <parameter name="fileNameIn" byreference="false" type="{unknown}"/>
  </method>
  <method name="sendFileRequest" start="472" end="513" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function builds and sends an API request to upload a file">The input parameters for this function must include a FILE</description>
      <param description="the full path and name of the file to upload" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </param>
      <return description="the result from the curl operation" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </return>
      <throws description="if setSignature fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <throws description="if $this-&gt;url is invalid" type="object">
        <type full="\UnexpectedValueException" namespace="" name="UnexpectedValueException"/>
      </throws>
      <throws description="if the fileNameIn parameter is empty or the file doesn't exist" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="fileNameIn" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Sign request" line="484"/>
      <comment value="Define the CURL_IGNORE_SSL_ERRORS constant if you want to skip SSL verification (not recommended)" line="494"/>
      <comment value="$fields['file'] = '@' . $fileNameIn;" line="499"/>
      <comment value="Send request." line="506"/>
    </inline>
  </method>
  <method name="validateSourceParams" start="526" end="548" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Function validates the source identifier parameters">Source identifier can contain fileId, fileName, folderNames, folderId
To be valid, a fileId OR (fileName AND (folderId OR folderNames)) must be given
If folderOnly is T, then fileId and fileName need not be specified</description>
      <param description="- T if the validation should be for the source folder only" type="boolean" variable="$folderOnly"/>
      <param description="- T if the validation should allow for folderId and/or fileId to be zero and/or the folderId to be -1 (all folders)" type="boolean" variable="$allowZeroIds"/>
      <return description="T if the parameters are valid" type="object">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="folderOnly" byreference="false" type="{unknown}"/>
    <parameter name="allowZeroIds" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="validateDestParams" start="561" end="579" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Function validates the destination identifier parameters">To be valid, destFileName AND (destFolderId OR destFolderNames) must be given
If folderOnly is T, then destFileName need not be given
If nameOnly is T, then destFolderId and destFolderNames need not be given (but folderOnly must be false)</description>
      <param description="T if the validation should be for the destination folder only" type="object">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </param>
      <param description="T if the validate should be for the destination name only, if specified, folderOnly must be false" type="object">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </param>
      <return description="T if the parameters are valid" type="object">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="folderOnly" byreference="false" type="{unknown}"/>
    <parameter name="nameOnly" byreference="false" type="{unknown}"/>
  </method>
  <method name="validateOutputParams" start="587" end="591" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Function validates the output type parameters">Source identifier must contain outputType equal to one of the APIRequest::API_OUTPUT_TYPE_X constants</description>
      <return description="T if the parameters are valid" type="object">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </return>
    </docblock>
  </method>
  <method name="validateSearchParams" start="600" end="608" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Function validates the search parameters">Source identifier may contain search and searchPartialMatch values unless $requireTerms is T, then search MUST be specified</description>
      <param description="- T if the check should error if terms are not specified" type="boolean" variable="$requireTerms"/>
      <return description="T if the parameters are valid" type="boolean"/>
    </docblock>
    <parameter name="requireTerms" byreference="false" type="{unknown}"/>
  </method>
  <method name="validateSmartFolderId" start="617" end="623" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Function validates the smart folder ID parameter">Source identifier must contain sfId</description>
      <return description="T if the parameters are valid" type="boolean"/>
      <throws description="for errors with invalid sfId parameter" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
  </method>
  <method name="validateOverwriteParams" start="630" end="644" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function validates the overwriteFile parameter and corresponding overwriteFileId parameter, which is required if overwriteFile is specified"/>
      <return description="T if the parameters are valid" type="boolean"/>
      <throws description="for errors with invalid overwriteFile or overwriteFileId parameters" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
  </method>
  <method name="validateCredParams" start="657" end="684" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Function validates the check cred parameters">Source identifier can contain fileKey, accountUsername, apiid, apipw</description>
      <param description="T if the validation should check fileKey" type="object" variable="$checkFileKey">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </param>
      <param description="T if the validation should check accountUsername" type="object" variable="$checkUsername">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </param>
      <param description="T if the validation should check apiid" type="object" variable="$checkApiId">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </param>
      <param description="T if the validation should check apipw" type="object" variable="$checkApiPw">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </param>
      <return description="T if the parameters are valid" type="object">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="checkFileKey" byreference="false" type="{unknown}"/>
    <parameter name="checkUsername" byreference="false" type="{unknown}"/>
    <parameter name="checkApiId" byreference="false" type="{unknown}"/>
    <parameter name="checkApiPw" byreference="false" type="{unknown}"/>
  </method>
  <method name="validateSetPermParams" start="692" end="698" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Function validates the set permissions parameters">Source identifier must contain permJson</description>
      <return description="T if the parameters are valid" type="boolean"/>
    </docblock>
  </method>
  <method name="validateCheckPermParams" start="706" end="722" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Function validates the check permissions parameters">Source identifier must contain objectUserId, objectId, objectIdType, requestedAccess</description>
      <return description="T if the parameters are valid" type="boolean"/>
    </docblock>
  </method>
  <method name="validateParams" start="731" end="809" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function validates the input parameters before they are passed to the API endpoint"/>
      <param description="the operation to check the parameters for" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </param>
      <return description="T if the params are validated, F otherwise" type="object">
        <type full="Stash\Boolean" namespace="Stash" name="Boolean"/>
      </return>
      <throws description="if the fileKey parameter is not included in the request" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="opIn" byreference="false" type="{unknown}"/>
  </method>
  <method name="mb_basename" start="817" end="824" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the file name for a given path (multi-byte string aware)"/>
      <param variable="$path"/>
      <return type="string"/>
      <see value="https://www.php.net/manual/en/function.basename.php#121405"/>
    </docblock>
    <parameter name="path" byreference="false" type="{unknown}"/>
  </method>
  <method name="getFile" start="837" end="866" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function reads a file from the STASH Vault"/>
      <param description="an Associative Array containing the source identifier, values which describe the file to read in the Vault" type="array"/>
      <param description="the file path and name to write the file to in the local filesystem" type="object">
        <type full="Stash\String" namespace="Stash" name="String"/>
      </param>
      <param description="OUTPUT the return code returned by the server in the response" type="object">
        <type full="Stash\Integer" namespace="Stash" name="Integer"/>
      </param>
      <return description="an associative array containing the response from the server" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="fileName" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <inline>
      <comment value="Read" line="838"/>
    </inline>
  </method>
  <method name="putFile" start="880" end="935" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function writes a file to a STASH Vault"/>
      <param description="- the file name and path to upload to STASH vault" type="string" variable="$fileNameIn"/>
      <param description="- an associative array containing the source identifier, the values of where to write the file in the Vault" type="array" variable="$srcIdentifier"/>
      <param description="- the return code in the response" type="integer" variable="$retCode"/>
      <param description="- the unique File ID (UserFile) for the newly created file" type="integer" variable="$fileId"/>
      <param description="- the unique File ID (UserFileAlias) for the newly created file" type="integer" variable="$fileAliasId"/>
      <return description="the result / output of the write operation" type="array"/>
      <throws description="if the input parameters are not valid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendFileRequest fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="fileNameIn" byreference="false" type="{unknown}"/>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <parameter name="fileId" byreference="true" type="{unknown}"/>
    <parameter name="fileAliasId" byreference="true" type="{unknown}"/>
    <inline>
      <comment value="Check if file exists on the server before uploading it and error if it does (files can't be overwritten)" line="899"/>
    </inline>
  </method>
  <method name="copyFile" start="948" end="961" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function copies a file in the Vault, creating an entirely new copy, including new files in the storage location(s)"/>
      <param description="- an associative array containing the source identifier, the values of where to read the file in the Vault" type="array" variable="$srcIdentifier"/>
      <param description="- an associative array containing the destination identifier, the values of where to write the file in the Vault" type="array" variable="$dstIdentifier"/>
      <param description="- an integer containing the return code from the request" type="integer" variable="$retCode"/>
      <param description="- an integer containing the unique identifier (UserFileAlias) for the file" type="integer" variable="$fileAliasId"/>
      <return description="the result / output of the operation" type="array"/>
      <throws description="if the input parameters are not valid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="dstIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <parameter name="fileAliasId" byreference="true" type="{unknown}"/>
  </method>
  <method name="renameFile" start="973" end="986" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function renames a file in the Vault"/>
      <param description="- an associative array containing the source identifier, the values of where to read the file in the Vault" type="array" variable="$srcIdentifier"/>
      <param description="- associative array containing the destination identifier, the values of the new filename" type="array" variable="$dstIdentifier"/>
      <param description="- an integer containing the return code from the request" type="integer" variable="$retCode"/>
      <return description="the result / output of the operation" type="array"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="dstIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
  </method>
  <method name="moveFile" start="998" end="1012" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function moves a file in the Vault, it does not change the files in the storage location(s)"/>
      <param description="- an associative array containing the source identifier, the values of where to read the file in the Vault" type="array" variable="$srcIdentifier"/>
      <param description="- an associative array containing the destination identifier, the values of where to write the file in the Vault" type="array" variable="$dstIdentifier"/>
      <param description="- an integer containing the return code from the request" type="integer" variable="$retCode"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="dstIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <inline>
      <comment value="Move" line="999"/>
    </inline>
  </method>
  <method name="deleteFile" start="1023" end="1037" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function deletes a file in the Vault"/>
      <param description="- an associative array containing the source identifier, the values of which file to delete in the Vault" type="array" variable="$srcIdentifier"/>
      <param description="- an integer containing the return code from the request" type="integer" variable="$retCode"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <inline>
      <comment value="Delete" line="1024"/>
    </inline>
  </method>
  <method name="listAll" start="1047" end="1061" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function lists all files in the user's vault, or in a specified folder in the vault"/>
      <param description="- an associative array containing the source identifier, the values of which folder to list" type="array" variable="$srcIdentifier"/>
      <param description="- an integer containing the return code from the request" type="integer" variable="$retCode"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
  </method>
  <method name="listFiles" start="1073" end="1107" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function lists all the files in the Vault or in a specified folder in the vault"/>
      <param description="- an associative array containing the source identifier, the values of which folder to list the files for in the Vault" type="array" variable="$srcIdentifier"/>
      <param description="- contains the return code from the operation" type="integer" variable="$retCode"/>
      <param description="- contains the names of the files returned by the request" type="array" variable="$fileNames"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <parameter name="fileNames" byreference="true" type="{unknown}"/>
    <inline>
      <comment value="List Files" line="1074"/>
      <comment value="$tVal = json_decode($res,true);" line="1089"/>
      <comment value="return json_decode($res,true);" line="1105"/>
    </inline>
  </method>
  <method name="listSFFiles" start="1119" end="1135" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function lists all the files in a specified SmartFolder"/>
      <param description="- an associative array containing the source identifier, the values of which folder to list the files for in the Vault" type="array" variable="$srcIdentifier"/>
      <param description="- OUTPUT, contains the return code from the operation" type="integer" variable="$retCode"/>
      <param description="- OUTPUT, contains the names of the files returned by the request" type="object" variable="$fileNames">
        <type full="Stash\array/string" namespace="Stash" name="array/string"/>
      </param>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <parameter name="fileNames" byreference="true" type="{unknown}"/>
    <inline>
      <comment value="List Files" line="1120"/>
    </inline>
  </method>
  <method name="listFolders" start="1146" end="1179" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function lists all the folders in the Vault or for the specified folder"/>
      <param description="- an associative array containing the source identifier, the values of which folder to list in the Vault" type="array" variable="$srcIdentifier"/>
      <param description="- contains the return code from the operation" type="integer" variable="$retCode"/>
      <param description="- contains the names of the folders returned by the request" type="array" variable="$folderNames"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <parameter name="folderNames" byreference="true" type="{unknown}"/>
    <inline>
      <comment value="List all folders" line="1147"/>
    </inline>
  </method>
  <method name="getFolderId" start="1188" end="1201" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function returns the Folder ID of the specified directory, or 0 if not found"/>
      <param description="an associative array containing the source identifier, the values of which folder to find the ID for" type="array"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Get the Internal Folder ID for the specified directory" line="1189"/>
    </inline>
  </method>
  <method name="createDirectory" start="1212" end="1233" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function recursively creates a folder in the vault"/>
      <param description="an associative array containing the source identifier, the values of which folder to create" type="array"/>
      <param description="- OUTPUT, the return code from the API call" type="integer" variable="$retCode"/>
      <param description="- OUTPUT, the user_folder.id of the newly created directory" type="integer" variable="$dirId"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <parameter name="dirId" byreference="true" type="{unknown}"/>
  </method>
  <method name="renameDirectory" start="1245" end="1260" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function renames a folder in the vault"/>
      <param description="- an associative array containing the source identifier, the values of which folder to rename" type="array" variable="$srcIdentifier"/>
      <param description="- an associative array containing the destination identifier, the values to rename the folder" type="array" variable="$dstIdentifier"/>
      <param description="- OUTPUT - the return code from the API call" type="integer" variable="$retCode"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="dstIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
  </method>
  <method name="moveDirectory" start="1271" end="1286" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function moves a folder in the vault"/>
      <param description="- an associative array containing the source identifier, the values of which folder to move" type="array" variable="$srcIdentifier"/>
      <param description="- an associative array containing the destination identifier, the values to move the folder" type="array" variable="$dstIdentifier"/>
      <param description="- the return code from the request" type="string" variable="$retCode"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="dstIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
  </method>
  <method name="copyDirectory" start="1298" end="1319" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function copies a folder in the vault"/>
      <param description="- an associative array containing the source identifier, the values of which folder to copy" type="array" variable="$srcIdentifier"/>
      <param description="- an associative array containing the destination identifier, the values of the folder to copy" type="array" variable="$dstIdentifier"/>
      <param description="- the return code from the request" type="string" variable="$retCode"/>
      <param description="- the unique identifier for the newly created folder" type="integer" variable="$dirId"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="dstIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <parameter name="dirId" byreference="true" type="{unknown}"/>
  </method>
  <method name="deleteDirectory" start="1329" end="1342" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function recursively deletes a folder in the vault"/>
      <param description="- an associative array containing the source identifier, the values of which folder to delete" type="array" variable="$srcIdentifier"/>
      <param description="- the return code from the request" type="integer" variable="$retCode"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
  </method>
  <method name="getFileInfo" start="1352" end="1366" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function gets the file information for the specified file in the Vault"/>
      <param description="- an associative array containing the source identifier, the values of which file to get the information for" type="array" variable="$srcIdentifier"/>
      <param description="OUTPUT, the return code from the function" type="integer" variable="$retCode"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
  </method>
  <method name="getFolderInfo" start="1376" end="1390" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function gets the folder information for the specified folder in the Vault"/>
      <param description="- an associative array containing the source identifier, the values of which file to get the information for" type="array" variable="$srcIdentifier"/>
      <param description="OUTPUT, the return code from the function" type="integer" variable="$retCode"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
  </method>
  <method name="getSyncInfo" start="1399" end="1415" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function gets sync info (path, type, hash, timestamp) for all sub-elements in specified folder"/>
      <param description="- an associative array containing the source identifier, the values of which file to get the information for" type="array" variable="$srcIdentifier"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
  </method>
  <method name="getVaultInfo" start="1424" end="1437" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function gets information on the user's vault"/>
      <param description="- an integer containing the return code from the request" type="integer" variable="$retCode"/>
      <throws description="if the input parameters are invalid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return description="the result / output of the operation" type="array"/>
    </docblock>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <inline>
      <comment value="No parameter validation necessary" line="1428"/>
    </inline>
  </method>
  <method name="checkCreds" start="1448" end="1460" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function checks the provided credentials to make sure the API ID, API PW, username, and account password match a valid account This function generates a failed login if the credentials are not valid for the given user account."/>
      <param description="- an associative array containing the source identifier, the values of which credentials to check" type="array" variable="$srcIdentifier"/>
      <return description="the result / output of the operation" type="array"/>
      <throws description="if the input parameters are not valid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
  </method>
  <method name="checkVaultConnection" start="1469" end="1486" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function checks the connection to the Vault with the current API settings"/>
      <param description="the return code from the operation" type="integer" variable="$retCode"/>
      <param description="the error message, if one occurs" type="string" variable="$errMsg"/>
      <return description="T if the connection to the vault succeeds, F otherwise" type="boolean"/>
      <throws description="for errors in sendRequest()" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <parameter name="errMsg" byreference="true" type="{unknown}"/>
  </method>
  <method name="isValidUser" start="1496" end="1508" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function checks the provided username and reports if its taken or not"/>
      <param description="- an associative array containing the source identifier, the values of which user account to check" type="array" variable="$srcIdentifier"/>
      <return description="the result / output of the operation" type="array"/>
      <throws description="if the input parameters are not valid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
  </method>
  <method name="setPermissions" start="1520" end="1535" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function sets the access permissions for a specified folder"/>
      <param description="- an associative array containing the permission values to set" type="array" variable="$srcIdentifier"/>
      <param description="- OUTPUT, contains the return code from the operation" type="integer" variable="$retCode"/>
      <param description="- OUTPUT, contains the integer IDs of the folder permission entries that were created or updated" type="array" variable="$permIds"/>
      <return description="the result / output of the operation" type="array"/>
      <throws description="if the input parameters are not valid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <parameter name="permIds" byreference="true" type="{unknown}"/>
  </method>
  <method name="checkPermissions" start="1547" end="1562" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function checks the access permissions for a specified folder and requested access level"/>
      <param description="- an associative array containing the objectId, objectIdType, and requestedAccess parameters" type="array" variable="$srcIdentifier"/>
      <param description="- OUTPUT, contains the return code from the operation" type="integer" variable="$retCode"/>
      <param description="- OUTPUT, contains the result of the permission check (T or F)" type="array" variable="$result"/>
      <return description="the result / output of the operation" type="array"/>
      <throws description="if the input parameters are not valid" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if sendRequest() fails" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="srcIdentifier" byreference="false" type="{unknown}"/>
    <parameter name="retCode" byreference="true" type="{unknown}"/>
    <parameter name="result" byreference="true" type="{unknown}"/>
  </method>
</class>
