<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Stash\STASHAPIScenarioTest" namespace="Stash" name="STASHAPIScenarioTest" abstract="false" final="false" start="15" end="1541">
  <file path="L:/Projects/Stash/StashApi-php-Release/docs/../tests/unit" file="STASHAPIScenarioTest.php" realpath="L:/Projects/Stash/StashApi-php-Release/tests/unit/STASHAPIScenarioTest.php" size="67332" time="2022-02-23T01:46:31+00:00" unixtime="1645580791" sha1="4f7fc629a58722ab22015ba29e4841cc355e3654" relative="tests/unit/STASHAPIScenarioTest.php"/>
  <docblock>
    <description compact="Class STASHAPIScenarioTest Runs scenario based testing for each of the API functions"/>
    <package value="Stash"/>
  </docblock>
  <extends full="Codeception\Test\Unit" namespace="Codeception\Test" name="Unit" unresolved="true"/>
  <member name="tester" visibility="protected" static="false" line="20">
    <docblock>
      <description/>
      <var type="object">
        <type full="UnitTester" namespace="" name="UnitTester"/>
      </var>
    </docblock>
  </member>
  <constant type="string" name="testFile" value="&quot;tmpfile_stashapitest.txt&quot;"/>
  <constant type="string" name="outFile" value="&quot;tmpfile_stashapitest.out.txt&quot;"/>
  <member name="apiid" visibility="private" static="false" line="23"/>
  <member name="apipw" visibility="private" static="false" line="24"/>
  <member name="baseUrl" visibility="private" static="false" line="25"/>
  <member name="accountId" visibility="private" static="false" line="26"/>
  <member name="accountUsername" visibility="private" static="false" line="27"/>
  <member name="accountPw" visibility="private" static="false" line="28"/>
  <member name="folderPath" visibility="private" static="false" line="29"/>
  <member name="folderId" visibility="private" static="false" line="30"/>
  <member name="doCleanup" visibility="private" static="false" line="31"/>
  <method name="_before" start="36" end="49" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="This function is run before each individual test"/>
    </docblock>
  </method>
  <method name="_after" start="55" end="75" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="This function is run after each individual test"/>
      <throws description="for errors in deleteFiles()" type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
  </method>
  <method name="setUpBeforeClass" start="81" end="88" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="The function is run once, before all tests in the suite are run"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <return type="void" nullable="false"/>
    <inline>
      <comment value="define(&quot;CURL_IGNORE_SSL_ERRORS&quot;, true);" line="83"/>
    </inline>
  </method>
  <method name="tearDownAfterClass" start="93" end="102" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="This function is run once, after all tests in the suite are run"/>
    </docblock>
    <return type="void" nullable="false"/>
  </method>
  <method name="testAPIValidConstructor" start="109" end="120" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests if the StashAPI constructor produces a valid constructor with given inputs"/>
      <return type="object">
        <type full="Stash\STASHAPI" namespace="Stash" name="STASHAPI"/>
      </return>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="API_ID not set" line="115"/>
    </inline>
  </method>
  <method name="testAPIListAll" start="127" end="135" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <depends value="testAPIValidConstructor"/>
      <param type="object" variable="$apiIn">
        <type full="Stash\STASHAPI" namespace="Stash" name="STASHAPI"/>
      </param>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="apiIn" byreference="false" type="{unknown}"/>
  </method>
  <method name="testAPIListFoldersRoot" start="143" end="149" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests getting folder list containing root folder"/>
      <depends value="testAPIValidConstructor"/>
      <param type="object" variable="$apiIn">
        <type full="Stash\STASHAPI" namespace="Stash" name="STASHAPI"/>
      </param>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="apiIn" byreference="false" type="{unknown}"/>
  </method>
  <method name="testAPIListFoldersAll" start="157" end="164" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests getting folder list containing all folders"/>
      <depends value="testAPIValidConstructor"/>
      <param type="object" variable="$apiIn">
        <type full="Stash\STASHAPI" namespace="Stash" name="STASHAPI"/>
      </param>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="apiIn" byreference="false" type="{unknown}"/>
  </method>
  <method name="testAPIListFoldersSub" start="172" end="179" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests getting folder list containing sub folders"/>
      <depends value="testAPIValidConstructor"/>
      <param type="object" variable="$apiIn">
        <type full="Stash\STASHAPI" namespace="Stash" name="STASHAPI"/>
      </param>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="apiIn" byreference="false" type="{unknown}"/>
  </method>
  <method name="testAPIFileReadByFileFolderNames" start="185" end="196" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the read() / getFile() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
  </method>
  <method name="testAPIFileSendByFolderId" start="201" end="232" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Create temp file to test upload/write" line="210"/>
    </inline>
  </method>
  <method name="testAPIFileSendByFolderNames" start="238" end="269" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the API sendRequest with folder names"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Create temp file to test upload/write" line="247"/>
    </inline>
  </method>
  <method name="testPutFile" start="278" end="320" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the putFile() function"/>
      <param description="if T will run the cleanup commands to remove the file uploaded to the vault and source file in the file system" type="boolean" variable="$cleanup"/>
      <param description="array of strings indicating which folder to upload the file to" type="array" variable="$destFolderNames"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
      <note value="if $cleanup is F, this function will set the doCleanup flag to indicate a file exists and must be deleted"/>
    </docblock>
    <parameter name="cleanup" byreference="false" type="boolean" default="true"/>
    <parameter name="destFolderNames" byreference="false" type="array" default=""/>
    <inline>
      <comment value="Delete the test file if it exists" line="286"/>
      <comment value="Cleanup" line="308"/>
    </inline>
  </method>
  <method name="testGetFile" start="326" end="349" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the getFile() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Cleanup" line="340"/>
    </inline>
  </method>
  <method name="testCopyFile" start="355" end="406" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the copyFile() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Delete destination file" line="361"/>
      <comment value="Copy File" line="366"/>
      <comment value="$src = array('fileKey'=&gt;$api-&gt;encryptString($this-&gt;accountPw,true), 'folderNames'=&gt;array(&quot;My Home&quot;, &quot;Documents&quot;), 'fileName' =&gt; &quot;copyOfFile.txt&quot;);" line="381"/>
      <comment value="Cleanup" line="391"/>
    </inline>
  </method>
  <method name="testRenameFile" start="412" end="453" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the renameFile() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Delete destination file" line="418"/>
      <comment value="Rename File" line="422"/>
      <comment value="Cleanup" line="444"/>
    </inline>
  </method>
  <method name="testMoveFile" start="459" end="500" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the moveFile() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Delete destination file" line="465"/>
      <comment value="Move File" line="469"/>
      <comment value="Cleanup" line="491"/>
    </inline>
  </method>
  <method name="testDeleteFile" start="506" end="510" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the delete file function (overlaps with testPutFile)"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Overlap with testPutFile()" line="508"/>
    </inline>
  </method>
  <method name="testListAll" start="516" end="594" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the listAll() function with Folder Names"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Check directory properties" line="534"/>
      <comment value="Check file properties" line="559"/>
    </inline>
  </method>
  <method name="testListAllRootFolder" start="600" end="659" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the listAll() function with Folder Id = 0 (root folder)"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Check directory properties" line="618"/>
    </inline>
  </method>
  <method name="testListFiles" start="665" end="859" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the listFiles() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Check outputType = 0 (no output)" line="673"/>
      <comment value="Check outputType = 1 (file names only)" line="686"/>
      <comment value="Check outputType = 2 (file and path as arrays)" line="701"/>
      <comment value="Check outputType = 3 (file and path as string)" line="731"/>
      <comment value="Check outputType = 4 (model JSON)" line="746"/>
      <comment value="Check outputType = 5 (GhostFiles format)" line="780"/>
      <comment value="Check outputType = 6 (NodeNameId Format)" line="806"/>
      <comment value="Cleanup" line="851"/>
    </inline>
  </method>
  <method name="testListSFFiles" start="864" end="868" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the listSFFiles() function"/>
    </docblock>
    <inline>
      <todo value="need to create a smart folder first, then run listSFFiles" line="866"/>
      <comment value="$this-&gt;markTestIncomplete(&quot;Not Implemented&quot;);" line="867"/>
    </inline>
  </method>
  <method name="testListFolders" start="874" end="1066" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the listFolders() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Check outputType = 0 (no output)" line="880"/>
      <comment value="Check outputType = 1 (folder names only)" line="893"/>
      <comment value="Check outputType = 2 (folder and path as arrays)" line="910"/>
      <comment value="error_log(&quot;Folders: &quot; . print_r($res['folders'], true));" line="918"/>
      <comment value="Check outputType = 3 (file and path as string)" line="943"/>
      <comment value="Check outputType = 4 (model JSON)" line="960"/>
      <comment value="Check outputType = 5 (GhostFiles format)" line="995"/>
      <comment value="Check outputType = 6 (NodeNameId format)" line="1021"/>
    </inline>
  </method>
  <method name="testCreateDirectory" start="1073" end="1101" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the createDirectory() function"/>
      <param description="T to remove the directory that was created, F to leave it" type="object" variable="$cleanup">
        <type full="Stash\bool" namespace="Stash" name="bool"/>
      </param>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="cleanup" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="testRenameDirectory" start="1107" end="1131" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the renameDirectory() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Cleanup" line="1127"/>
    </inline>
  </method>
  <method name="testMoveDirectory" start="1137" end="1170" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the moveDirectory() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="$this-&gt;assertEquals(200, $retCode, &quot;Delete Directory: &quot; . json_encode($res));" line="1144"/>
      <comment value="Cleanup" line="1165"/>
    </inline>
  </method>
  <method name="testCopyDirectory" start="1176" end="1218" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the copyDirectory() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Cleanup" line="1213"/>
    </inline>
  </method>
  <method name="testDeleteDirectory" start="1225" end="1229" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the deleteDirectory() function Overlaps with testCreateDirectory, @throws Exception"/>
      <see value="testCreateDirectory"/>
    </docblock>
    <inline>
      <comment value="Overlaps with testCreateDirectory()" line="1227"/>
    </inline>
  </method>
  <method name="testGetFolderId" start="1235" end="1247" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the getFolderId() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
  </method>
  <method name="testGetFileInfo" start="1253" end="1302" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the getFileInfo() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Test filePath" line="1276"/>
      <comment value="Cleanup" line="1294"/>
    </inline>
  </method>
  <method name="testGetFolderInfo" start="1308" end="1335" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the getFolderInfo() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
  </method>
  <method name="testGetSyncInfo" start="1341" end="1362" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests getSyncInfo() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
  </method>
  <method name="testGetVaultInfo" start="1368" end="1393" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the getVaultInfo() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
  </method>
  <method name="testCheckCreds" start="1399" end="1422" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the checkCreds() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
  </method>
  <method name="testCheckVaultConnection" start="1428" end="1436" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the checkVaultConnection() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
  </method>
  <method name="testIsValidUser" start="1442" end="1459" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the isValidUser() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
  </method>
  <method name="testSetPermissions" start="1465" end="1490" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the setPermissions() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Get Folder ID for Documents Directory" line="1469"/>
      <comment value="Build permission array for user 92 (which doesn't exist)" line="1477"/>
      <comment value="Extend function to test with Pro account here" line="1488"/>
    </inline>
  </method>
  <method name="testCheckPermissions" start="1496" end="1520" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the checkPermissions() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Get Folder ID for Documents Directory" line="1500"/>
    </inline>
  </method>
  <method name="testWebEraseToken" start="1526" end="1540" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests the WebErase token() function"/>
      <throws type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Get Folder ID for Documents Directory" line="1530"/>
      <comment value="$src = array('folderNames' =&gt; array(&quot;My Home&quot;, &quot;Documents&quot;));" line="1531"/>
      <comment value="$token = $res['token'];" line="1539"/>
    </inline>
  </method>
</class>
