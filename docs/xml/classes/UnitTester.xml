<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="UnitTester" namespace="" name="UnitTester" abstract="false" final="false" start="19" end="26">
  <file path="L:/Projects/Stash/StashApi-php-Release/docs/../tests/_support" file="UnitTester.php" realpath="L:/Projects/Stash/StashApi-php-Release/tests/_support/UnitTester.php" size="624" time="2019-06-13T21:47:23+00:00" unixtime="1560462443" sha1="01b513ac3cc7842cd484de049cb23b219dc09507" relative="tests/_support/UnitTester.php"/>
  <docblock>
    <description compact="Inherited Methods"/>
    <method value="void wantToTest($text)"/>
    <method value="void wantTo($text)"/>
    <method value="void execute($callable)"/>
    <method value="void expectTo($prediction)"/>
    <method value="void expect($prediction)"/>
    <method value="void amGoingTo($argumentation)"/>
    <method value="void am($role)"/>
    <method value="void lookForwardTo($achieveValue)"/>
    <method value="void comment($description)"/>
    <method value="\Codeception\Lib\Friend haveFriend($name, $actorClass = NULL)"/>
    <suppresswarnings value="(PHPMD)"/>
  </docblock>
  <extends full="Codeception\Actor" namespace="Codeception" name="Actor" unresolved="true"/>
  <uses full="_generated\UnitTesterActions" namespace="_generated" name="UnitTesterActions" start="21" end="21"/>
  <trait full="_generated\UnitTesterActions" namespace="_generated" name="UnitTesterActions">
    <method name="getScenario" start="13" end="13" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description/>
        <return type="object">
          <type full="\Codeception\Scenario" namespace="\Codeception" name="Scenario"/>
        </return>
      </docblock>
    </method>
    <method name="expectThrowable" start="44" end="46" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Handles and checks throwables (Exceptions/Errors) called inside the callback function.
Either throwable class name or throwable instance should be provided.

```php
&lt;?php
$I-&gt;expectThrowable(MyThrowable::class, function() {
    $this-&gt;doSomethingBad();
});

$I-&gt;expectThrowable(new MyException(), function() {
    $this-&gt;doSomethingBad();
});
```
If you want to check message or throwable code, you can pass them with throwable instance:
```php
&lt;?php
// will check that throwable MyError is thrown with "Don't do bad things" message
$I-&gt;expectThrowable(new MyError("Don't do bad things"), function() {
    $this-&gt;doSomethingBad();
});
```</description>
        <param type="object" variable="$throwable">
          <type full="_generated\Throwable|string" namespace="_generated" name="Throwable|string"/>
        </param>
        <see value="\Codeception\Module\Asserts::expectThrowable()"/>
      </docblock>
      <return type="void" nullable="false"/>
      <parameter name="throwable" byreference="false" type="{unknown}"/>
      <parameter name="callback" byreference="false" type="callable"/>
    </method>
    <method name="assertFileNotExists" start="58" end="60" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a file does not exist.</description>
        <param type="string" variable="$filename"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFileNotExists()"/>
      </docblock>
      <parameter name="filename" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertGreaterOrEquals" start="73" end="75" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a value is greater than or equal to another value.</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertGreaterOrEquals()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsEmpty" start="87" end="89" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is empty.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsEmpty()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertLessOrEquals" start="102" end="104" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a value is smaller than or equal to another value.</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertLessOrEquals()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotRegExp" start="117" end="119" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a string does not match a given regular expression.</description>
        <param type="string" variable="$pattern"/>
        <param type="string" variable="$string"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotRegExp()"/>
      </docblock>
      <parameter name="pattern" byreference="false" type="{unknown}"/>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertRegExp" start="132" end="134" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a string matches a given regular expression.</description>
        <param type="string" variable="$pattern"/>
        <param type="string" variable="$string"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertRegExp()"/>
      </docblock>
      <parameter name="pattern" byreference="false" type="{unknown}"/>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertThatItsNot" start="147" end="149" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Evaluates a PHPUnit\Framework\Constraint matcher object.</description>
        <param variable="$value"/>
        <param type="object" variable="$constraint">
          <type full="_generated\Constraint" namespace="_generated" name="Constraint"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertThatItsNot()"/>
      </docblock>
      <parameter name="value" byreference="false" type="{unknown}"/>
      <parameter name="constraint" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertArrayHasKey" start="162" end="164" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that an array has a specified key.</description>
        <param type="object" variable="$key">
          <type full="_generated\int|string" namespace="_generated" name="int|string"/>
        </param>
        <param type="object" variable="$array">
          <type full="_generated\array|ArrayAccess" namespace="_generated" name="array|ArrayAccess"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertArrayHasKey()"/>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
      <parameter name="array" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertArrayNotHasKey" start="177" end="179" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that an array does not have a specified key.</description>
        <param type="object" variable="$key">
          <type full="_generated\int|string" namespace="_generated" name="int|string"/>
        </param>
        <param type="object" variable="$array">
          <type full="_generated\array|ArrayAccess" namespace="_generated" name="array|ArrayAccess"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertArrayNotHasKey()"/>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
      <parameter name="array" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertClassHasAttribute" start="192" end="194" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a class has a specified attribute.</description>
        <param type="string" variable="$attributeName"/>
        <param type="string" variable="$className"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertClassHasAttribute()"/>
      </docblock>
      <parameter name="attributeName" byreference="false" type="{unknown}"/>
      <parameter name="className" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertClassHasStaticAttribute" start="207" end="209" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a class has a specified static attribute.</description>
        <param type="string" variable="$attributeName"/>
        <param type="string" variable="$className"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertClassHasStaticAttribute()"/>
      </docblock>
      <parameter name="attributeName" byreference="false" type="{unknown}"/>
      <parameter name="className" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertClassNotHasAttribute" start="222" end="224" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a class does not have a specified attribute.</description>
        <param type="string" variable="$attributeName"/>
        <param type="string" variable="$className"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertClassNotHasAttribute()"/>
      </docblock>
      <parameter name="attributeName" byreference="false" type="{unknown}"/>
      <parameter name="className" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertClassNotHasStaticAttribute" start="237" end="239" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a class does not have a specified static attribute.</description>
        <param type="string" variable="$attributeName"/>
        <param type="string" variable="$className"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertClassNotHasStaticAttribute()"/>
      </docblock>
      <parameter name="attributeName" byreference="false" type="{unknown}"/>
      <parameter name="className" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertContains" start="252" end="254" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a haystack contains a needle.</description>
        <param variable="$needle"/>
        <param variable="$haystack"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertContains()"/>
      </docblock>
      <parameter name="needle" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertContainsEquals" start="265" end="267" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
        <param variable="$needle"/>
        <param variable="$haystack"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertContainsEquals()"/>
      </docblock>
      <parameter name="needle" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertContainsOnly" start="281" end="283" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a haystack contains only values of a given type.</description>
        <param type="string" variable="$type"/>
        <param variable="$haystack"/>
        <param type="object" variable="$isNativeType">
          <type full="_generated\bool|null" namespace="_generated" name="bool|null"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertContainsOnly()"/>
      </docblock>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="isNativeType" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertContainsOnlyInstancesOf" start="296" end="298" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a haystack contains only instances of a given class name.</description>
        <param type="string" variable="$className"/>
        <param variable="$haystack"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertContainsOnlyInstancesOf()"/>
      </docblock>
      <parameter name="className" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertCount" start="311" end="313" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts the number of elements of an array, Countable or Traversable.</description>
        <param type="int" variable="$expectedCount"/>
        <param type="object" variable="$haystack">
          <type full="_generated\Countable|iterable" namespace="_generated" name="Countable|iterable"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertCount()"/>
      </docblock>
      <parameter name="expectedCount" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertDirectoryDoesNotExist" start="325" end="327" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a directory does not exist.</description>
        <param type="string" variable="$directory"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertDirectoryDoesNotExist()"/>
      </docblock>
      <parameter name="directory" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertDirectoryExists" start="339" end="341" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a directory exists.</description>
        <param type="string" variable="$directory"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertDirectoryExists()"/>
      </docblock>
      <parameter name="directory" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertDirectoryIsNotReadable" start="353" end="355" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a directory exists and is not readable.</description>
        <param type="string" variable="$directory"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertDirectoryIsNotReadable()"/>
      </docblock>
      <parameter name="directory" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertDirectoryIsNotWritable" start="367" end="369" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a directory exists and is not writable.</description>
        <param type="string" variable="$directory"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertDirectoryIsNotWritable()"/>
      </docblock>
      <parameter name="directory" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertDirectoryIsReadable" start="381" end="383" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a directory exists and is readable.</description>
        <param type="string" variable="$directory"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertDirectoryIsReadable()"/>
      </docblock>
      <parameter name="directory" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertDirectoryIsWritable" start="395" end="397" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a directory exists and is writable.</description>
        <param type="string" variable="$directory"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertDirectoryIsWritable()"/>
      </docblock>
      <parameter name="directory" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertDoesNotMatchRegularExpression" start="410" end="412" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a string does not match a given regular expression.</description>
        <param type="string" variable="$pattern"/>
        <param type="string" variable="$string"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertDoesNotMatchRegularExpression()"/>
      </docblock>
      <parameter name="pattern" byreference="false" type="{unknown}"/>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertEmpty" start="424" end="426" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is empty.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertEmpty()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertEquals" start="439" end="441" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two variables are equal.</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertEquals()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertEqualsCanonicalizing" start="454" end="456" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two variables are equal (canonicalizing).</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertEqualsCanonicalizing()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertEqualsIgnoringCase" start="469" end="471" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two variables are equal (ignoring case).</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertEqualsIgnoringCase()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertEqualsWithDelta" start="485" end="487" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two variables are equal (with delta).</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="float" variable="$delta"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertEqualsWithDelta()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="delta" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFalse" start="499" end="501" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a condition is false.</description>
        <param variable="$condition"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFalse()"/>
      </docblock>
      <parameter name="condition" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFileDoesNotExist" start="513" end="515" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a file does not exist.</description>
        <param type="string" variable="$filename"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFileDoesNotExist()"/>
      </docblock>
      <parameter name="filename" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFileEquals" start="528" end="530" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the contents of one file is equal to the contents of another file.</description>
        <param type="string" variable="$expected"/>
        <param type="string" variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFileEquals()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFileEqualsCanonicalizing" start="543" end="545" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the contents of one file is equal to the contents of another file (canonicalizing).</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFileEqualsCanonicalizing()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFileEqualsIgnoringCase" start="558" end="560" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the contents of one file is equal to the contents of another file (ignoring case).</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFileEqualsIgnoringCase()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFileExists" start="572" end="574" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a file exists.</description>
        <param type="string" variable="$filename"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFileExists()"/>
      </docblock>
      <parameter name="filename" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFileIsNotReadable" start="586" end="588" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a file exists and is not readable.</description>
        <param type="string" variable="$file"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFileIsNotReadable()"/>
      </docblock>
      <parameter name="file" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFileIsNotWritable" start="600" end="602" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a file exists and is not writable.</description>
        <param type="string" variable="$file"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFileIsNotWritable()"/>
      </docblock>
      <parameter name="file" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFileIsReadable" start="614" end="616" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a file exists and is readable.</description>
        <param type="string" variable="$file"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFileIsReadable()"/>
      </docblock>
      <parameter name="file" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFileIsWritable" start="628" end="630" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a file exists and is writable.</description>
        <param type="string" variable="$file"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFileIsWritable()"/>
      </docblock>
      <parameter name="file" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFileNotEquals" start="643" end="645" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the contents of one file is not equal to the contents of another file.</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFileNotEquals()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFileNotEqualsCanonicalizing" start="658" end="660" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the contents of one file is not equal to the contents of another file (canonicalizing).</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFileNotEqualsCanonicalizing()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFileNotEqualsIgnoringCase" start="673" end="675" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the contents of one file is not equal to the contents of another file (ignoring case).</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFileNotEqualsIgnoringCase()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertFinite" start="687" end="689" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is finite.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertFinite()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertGreaterThan" start="702" end="704" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a value is greater than another value.</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertGreaterThan()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertGreaterThanOrEqual" start="717" end="719" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a value is greater than or equal to another value.</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertGreaterThanOrEqual()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertInfinite" start="731" end="733" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is infinite.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertInfinite()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertInstanceOf" start="746" end="748" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is of a given type.</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertInstanceOf()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsArray" start="760" end="762" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is of type array.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsArray()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsBool" start="774" end="776" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is of type bool.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsBool()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsCallable" start="788" end="790" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is of type callable.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsCallable()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsClosedResource" start="802" end="804" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is of type resource and is closed.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsClosedResource()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsFloat" start="816" end="818" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is of type float.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsFloat()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsInt" start="830" end="832" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is of type int.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsInt()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsIterable" start="844" end="846" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is of type iterable.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsIterable()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotArray" start="858" end="860" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not of type array.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotArray()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotBool" start="872" end="874" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not of type bool.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotBool()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotCallable" start="886" end="888" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not of type callable.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotCallable()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotClosedResource" start="900" end="902" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not of type resource.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotClosedResource()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotFloat" start="914" end="916" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not of type float.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotFloat()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotInt" start="928" end="930" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not of type int.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotInt()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotIterable" start="942" end="944" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not of type iterable.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotIterable()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotNumeric" start="956" end="958" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not of type numeric.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotNumeric()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotObject" start="970" end="972" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not of type object.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotObject()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotReadable" start="984" end="986" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a file/dir exists and is not readable.</description>
        <param type="string" variable="$filename"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotReadable()"/>
      </docblock>
      <parameter name="filename" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotResource" start="998" end="1000" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not of type resource.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotResource()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotScalar" start="1012" end="1014" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not of type scalar.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotScalar()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotString" start="1026" end="1028" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not of type string.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotString()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNotWritable" start="1040" end="1042" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a file/dir exists and is not writable.</description>
        <param variable="$filename"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNotWritable()"/>
      </docblock>
      <parameter name="filename" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsNumeric" start="1054" end="1056" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is of type numeric.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsNumeric()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsObject" start="1068" end="1070" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is of type object.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsObject()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsReadable" start="1082" end="1084" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a file/dir is readable.</description>
        <param variable="$filename"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsReadable()"/>
      </docblock>
      <parameter name="filename" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsResource" start="1096" end="1098" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is of type resource.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsResource()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsScalar" start="1110" end="1112" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is of type scalar.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsScalar()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsString" start="1124" end="1126" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is of type string.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsString()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertIsWritable" start="1138" end="1140" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a file/dir exists and is writable.</description>
        <param variable="$filename"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertIsWritable()"/>
      </docblock>
      <parameter name="filename" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertJson" start="1152" end="1154" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a string is a valid JSON string.</description>
        <param type="string" variable="$actualJson"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertJson()"/>
      </docblock>
      <parameter name="actualJson" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertJsonFileEqualsJsonFile" start="1167" end="1169" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two JSON files are equal.</description>
        <param type="string" variable="$expectedFile"/>
        <param type="string" variable="$actualFile"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertJsonFileEqualsJsonFile()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualFile" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertJsonFileNotEqualsJsonFile" start="1182" end="1184" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two JSON files are not equal.</description>
        <param type="string" variable="$expectedFile"/>
        <param type="string" variable="$actualFile"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertJsonFileNotEqualsJsonFile()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualFile" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertJsonStringEqualsJsonFile" start="1197" end="1199" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the generated JSON encoded object and the content of the given file are equal.</description>
        <param type="string" variable="$expectedFile"/>
        <param type="string" variable="$actualJson"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonFile()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualJson" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertJsonStringEqualsJsonString" start="1212" end="1214" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two given JSON encoded objects or arrays are equal.</description>
        <param type="string" variable="$expectedJson"/>
        <param type="string" variable="$actualJson"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonString()"/>
      </docblock>
      <parameter name="expectedJson" byreference="false" type="{unknown}"/>
      <parameter name="actualJson" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertJsonStringNotEqualsJsonFile" start="1227" end="1229" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the generated JSON encoded object and the content of the given file are not equal.</description>
        <param type="string" variable="$expectedFile"/>
        <param type="string" variable="$actualJson"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonFile()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualJson" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertJsonStringNotEqualsJsonString" start="1242" end="1244" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two given JSON encoded objects or arrays are not equal.</description>
        <param type="string" variable="$expectedJson"/>
        <param type="string" variable="$actualJson"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonString()"/>
      </docblock>
      <parameter name="expectedJson" byreference="false" type="{unknown}"/>
      <parameter name="actualJson" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertLessThan" start="1257" end="1259" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a value is smaller than another value.</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertLessThan()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertLessThanOrEqual" start="1272" end="1274" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a value is smaller than or equal to another value.</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertLessThanOrEqual()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertMatchesRegularExpression" start="1287" end="1289" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a string matches a given regular expression.</description>
        <param type="string" variable="$pattern"/>
        <param type="string" variable="$string"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertMatchesRegularExpression()"/>
      </docblock>
      <parameter name="pattern" byreference="false" type="{unknown}"/>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNan" start="1301" end="1303" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is nan.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNan()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotContains" start="1316" end="1318" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a haystack does not contain a needle.</description>
        <param variable="$needle"/>
        <param variable="$haystack"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotContains()"/>
      </docblock>
      <parameter name="needle" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotContainsEquals" start="1327" end="1329" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotContainsEquals()"/>
      </docblock>
      <parameter name="needle" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotContainsOnly" start="1343" end="1345" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a haystack does not contain only values of a given type.</description>
        <param type="string" variable="$type"/>
        <param variable="$haystack"/>
        <param type="object" variable="$isNativeType">
          <type full="_generated\bool|null" namespace="_generated" name="bool|null"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotContainsOnly()"/>
      </docblock>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="isNativeType" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotCount" start="1358" end="1360" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts the number of elements of an array, Countable or Traversable.</description>
        <param type="int" variable="$expectedCount"/>
        <param type="object" variable="$haystack">
          <type full="_generated\Countable|iterable" namespace="_generated" name="Countable|iterable"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotCount()"/>
      </docblock>
      <parameter name="expectedCount" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotEmpty" start="1372" end="1374" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not empty.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotEmpty()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotEquals" start="1387" end="1389" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two variables are not equal.</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotEquals()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotEqualsCanonicalizing" start="1402" end="1404" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two variables are not equal (canonicalizing).</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotEqualsCanonicalizing()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotEqualsIgnoringCase" start="1417" end="1419" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two variables are not equal (ignoring case).</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotEqualsIgnoringCase()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotEqualsWithDelta" start="1433" end="1435" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two variables are not equal (with delta).</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="float" variable="$delta"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotEqualsWithDelta()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="delta" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotFalse" start="1447" end="1449" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a condition is not false.</description>
        <param variable="$condition"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotFalse()"/>
      </docblock>
      <parameter name="condition" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotInstanceOf" start="1462" end="1464" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not of a given type.</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotInstanceOf()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotNull" start="1476" end="1478" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is not null.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotNull()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotSame" start="1491" end="1493" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two variables do not have the same type and value.</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotSame()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotSameSize" start="1506" end="1508" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Assert that the size of two arrays (or `Countable` or `Traversable` objects) is not the same.</description>
        <param type="object" variable="$expected">
          <type full="_generated\Countable|iterable" namespace="_generated" name="Countable|iterable"/>
        </param>
        <param type="object" variable="$actual">
          <type full="_generated\Countable|iterable" namespace="_generated" name="Countable|iterable"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotSameSize()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNotTrue" start="1520" end="1522" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a condition is not true.</description>
        <param variable="$condition"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNotTrue()"/>
      </docblock>
      <parameter name="condition" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertNull" start="1534" end="1536" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a variable is null.</description>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertNull()"/>
      </docblock>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertObjectHasAttribute" start="1549" end="1551" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that an object has a specified attribute.</description>
        <param type="string" variable="$attributeName"/>
        <param type="object" variable="$object"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertObjectHasAttribute()"/>
      </docblock>
      <parameter name="attributeName" byreference="false" type="{unknown}"/>
      <parameter name="object" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertObjectNotHasAttribute" start="1564" end="1566" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that an object does not have a specified attribute.</description>
        <param type="string" variable="$attributeName"/>
        <param type="object" variable="$object"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertObjectNotHasAttribute()"/>
      </docblock>
      <parameter name="attributeName" byreference="false" type="{unknown}"/>
      <parameter name="object" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertSame" start="1579" end="1581" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two variables have the same type and value.</description>
        <param variable="$expected"/>
        <param variable="$actual"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertSame()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertSameSize" start="1594" end="1596" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Assert that the size of two arrays (or `Countable` or `Traversable` objects) is the same.</description>
        <param type="object" variable="$expected">
          <type full="_generated\Countable|iterable" namespace="_generated" name="Countable|iterable"/>
        </param>
        <param type="object" variable="$actual">
          <type full="_generated\Countable|iterable" namespace="_generated" name="Countable|iterable"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertSameSize()"/>
      </docblock>
      <parameter name="expected" byreference="false" type="{unknown}"/>
      <parameter name="actual" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringContainsString" start="1607" end="1609" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
        <param type="string" variable="$needle"/>
        <param type="string" variable="$haystack"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringContainsString()"/>
      </docblock>
      <parameter name="needle" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringContainsStringIgnoringCase" start="1618" end="1620" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringContainsStringIgnoringCase()"/>
      </docblock>
      <parameter name="needle" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringEndsNotWith" start="1633" end="1635" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a string ends not with a given suffix.</description>
        <param type="string" variable="$suffix"/>
        <param type="string" variable="$string"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringEndsNotWith()"/>
      </docblock>
      <parameter name="suffix" byreference="false" type="{unknown}"/>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringEndsWith" start="1648" end="1650" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a string ends with a given suffix.</description>
        <param type="string" variable="$suffix"/>
        <param type="string" variable="$string"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringEndsWith()"/>
      </docblock>
      <parameter name="suffix" byreference="false" type="{unknown}"/>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringEqualsFile" start="1663" end="1665" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the contents of a string is equal to the contents of a file.</description>
        <param type="string" variable="$expectedFile"/>
        <param type="string" variable="$actualString"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringEqualsFile()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualString" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringEqualsFileCanonicalizing" start="1678" end="1680" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the contents of a string is equal to the contents of a file (canonicalizing).</description>
        <param type="string" variable="$expectedFile"/>
        <param type="string" variable="$actualString"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringEqualsFileCanonicalizing()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualString" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringEqualsFileIgnoringCase" start="1693" end="1695" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the contents of a string is equal to the contents of a file (ignoring case).</description>
        <param type="string" variable="$expectedFile"/>
        <param type="string" variable="$actualString"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringEqualsFileIgnoringCase()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualString" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringMatchesFormat" start="1708" end="1710" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a string matches a given format string.</description>
        <param type="string" variable="$format"/>
        <param type="string" variable="$string"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringMatchesFormat()"/>
      </docblock>
      <parameter name="format" byreference="false" type="{unknown}"/>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringMatchesFormatFile" start="1723" end="1725" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a string matches a given format file.</description>
        <param type="string" variable="$formatFile"/>
        <param type="string" variable="$string"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringMatchesFormatFile()"/>
      </docblock>
      <parameter name="formatFile" byreference="false" type="{unknown}"/>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringNotContainsString" start="1736" end="1738" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
        <param type="string" variable="$needle"/>
        <param type="string" variable="$haystack"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringNotContainsString()"/>
      </docblock>
      <parameter name="needle" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringNotContainsStringIgnoringCase" start="1749" end="1751" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
        <param type="string" variable="$needle"/>
        <param type="string" variable="$haystack"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringNotContainsStringIgnoringCase()"/>
      </docblock>
      <parameter name="needle" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringNotEqualsFile" start="1764" end="1766" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the contents of a string is not equal to the contents of a file.</description>
        <param type="string" variable="$expectedFile"/>
        <param type="string" variable="$actualString"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringNotEqualsFile()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualString" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringNotEqualsFileCanonicalizing" start="1778" end="1780" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the contents of a string is not equal to the contents of a file (canonicalizing).</description>
        <param type="string" variable="$expectedFile"/>
        <param type="string" variable="$actualString"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringNotEqualsFileCanonicalizing()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualString" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringNotEqualsFileIgnoringCase" start="1793" end="1795" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that the contents of a string is not equal to the contents of a file (ignoring case).</description>
        <param type="string" variable="$expectedFile"/>
        <param type="string" variable="$actualString"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringNotEqualsFileIgnoringCase()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualString" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringNotMatchesFormat" start="1808" end="1810" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a string does not match a given format string.</description>
        <param type="string" variable="$format"/>
        <param type="string" variable="$string"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringNotMatchesFormat()"/>
      </docblock>
      <parameter name="format" byreference="false" type="{unknown}"/>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringNotMatchesFormatFile" start="1823" end="1825" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a string does not match a given format string.</description>
        <param type="string" variable="$formatFile"/>
        <param type="string" variable="$string"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringNotMatchesFormatFile()"/>
      </docblock>
      <parameter name="formatFile" byreference="false" type="{unknown}"/>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringStartsNotWith" start="1838" end="1840" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a string starts not with a given prefix.</description>
        <param type="string" variable="$prefix"/>
        <param type="string" variable="$string"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringStartsNotWith()"/>
      </docblock>
      <parameter name="prefix" byreference="false" type="{unknown}"/>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertStringStartsWith" start="1853" end="1855" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a string starts with a given prefix.</description>
        <param type="string" variable="$prefix"/>
        <param type="string" variable="$string"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertStringStartsWith()"/>
      </docblock>
      <parameter name="prefix" byreference="false" type="{unknown}"/>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertThat" start="1868" end="1870" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Evaluates a PHPUnit\Framework\Constraint matcher object.</description>
        <param variable="$value"/>
        <param type="object" variable="$constraint">
          <type full="_generated\Constraint" namespace="_generated" name="Constraint"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertThat()"/>
      </docblock>
      <parameter name="value" byreference="false" type="{unknown}"/>
      <parameter name="constraint" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertTrue" start="1882" end="1884" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that a condition is true.</description>
        <param variable="$condition"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertTrue()"/>
      </docblock>
      <parameter name="condition" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertXmlFileEqualsXmlFile" start="1897" end="1899" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two XML files are equal.</description>
        <param type="string" variable="$expectedFile"/>
        <param type="string" variable="$actualFile"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertXmlFileEqualsXmlFile()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualFile" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertXmlFileNotEqualsXmlFile" start="1912" end="1914" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two XML files are not equal.</description>
        <param type="string" variable="$expectedFile"/>
        <param type="string" variable="$actualFile"/>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertXmlFileNotEqualsXmlFile()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualFile" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertXmlStringEqualsXmlFile" start="1927" end="1929" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two XML documents are equal.</description>
        <param type="string" variable="$expectedFile"/>
        <param type="object" variable="$actualXml">
          <type full="_generated\DOMDocument|string" namespace="_generated" name="DOMDocument|string"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlFile()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualXml" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertXmlStringEqualsXmlString" start="1942" end="1944" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two XML documents are equal.</description>
        <param type="object" variable="$expectedXml">
          <type full="_generated\DOMDocument|string" namespace="_generated" name="DOMDocument|string"/>
        </param>
        <param type="object" variable="$actualXml">
          <type full="_generated\DOMDocument|string" namespace="_generated" name="DOMDocument|string"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlString()"/>
      </docblock>
      <parameter name="expectedXml" byreference="false" type="{unknown}"/>
      <parameter name="actualXml" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertXmlStringNotEqualsXmlFile" start="1957" end="1959" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two XML documents are not equal.</description>
        <param type="string" variable="$expectedFile"/>
        <param type="object" variable="$actualXml">
          <type full="_generated\DOMDocument|string" namespace="_generated" name="DOMDocument|string"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlFile()"/>
      </docblock>
      <parameter name="expectedFile" byreference="false" type="{unknown}"/>
      <parameter name="actualXml" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="assertXmlStringNotEqualsXmlString" start="1972" end="1974" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Asserts that two XML documents are not equal.</description>
        <param type="object" variable="$expectedXml">
          <type full="_generated\DOMDocument|string" namespace="_generated" name="DOMDocument|string"/>
        </param>
        <param type="object" variable="$actualXml">
          <type full="_generated\DOMDocument|string" namespace="_generated" name="DOMDocument|string"/>
        </param>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlString()"/>
      </docblock>
      <parameter name="expectedXml" byreference="false" type="{unknown}"/>
      <parameter name="actualXml" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="fail" start="1985" end="1987" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Fails a test with the given message.</description>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::fail()"/>
      </docblock>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="markTestIncomplete" start="1998" end="2000" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Mark the test as incomplete.</description>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::markTestIncomplete()"/>
      </docblock>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="markTestSkipped" start="2011" end="2013" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="[!] Method is generated. Documentation taken from corresponding module.">Mark the test as skipped.</description>
        <param type="string" variable="$message"/>
        <see value="\Codeception\Module\AbstractAsserts::markTestSkipped()"/>
      </docblock>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
  </trait>
</class>
